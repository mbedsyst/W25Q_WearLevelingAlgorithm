
FLASH_WearLevelling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000464  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f8  08000600  00001600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f8  080005f8  00001600  2**0
                  CONTENTS
  4 .ARM          00000000  080005f8  080005f8  00001600  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005f8  08000600  00001600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f8  080005f8  000015f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005fc  080005fc  000015fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000600  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000600  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011bd  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000610  00000000  00000000  000027ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00002e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014e  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000014b4  00000000  00000000  0000312e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024e8  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000538e8  00000000  00000000  00006aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005a3b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005fc  00000000  00000000  0005a3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0005a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005e0 	.word	0x080005e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005e0 	.word	0x080005e0

080001d4 <SPI2_SelectSlave>:
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
}

void SPI2_SelectSlave(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <SPI2_SelectSlave+0x18>)
 80001da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80001de:	619a      	str	r2, [r3, #24]
}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40020400 	.word	0x40020400

080001f0 <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 80001f4:	4b04      	ldr	r3, [pc, #16]	@ (8000208 <SPI2_DeselectSlave+0x18>)
 80001f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80001fa:	619a      	str	r2, [r3, #24]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40020400 	.word	0x40020400

0800020c <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 8000216:	bf00      	nop
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <SPI2_TransmitReceiveByte+0x40>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	f003 0302 	and.w	r3, r3, #2
 8000220:	2b00      	cmp	r3, #0
 8000222:	d0f9      	beq.n	8000218 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 8000224:	4a09      	ldr	r2, [pc, #36]	@ (800024c <SPI2_TransmitReceiveByte+0x40>)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 800022a:	bf00      	nop
 800022c:	4b07      	ldr	r3, [pc, #28]	@ (800024c <SPI2_TransmitReceiveByte+0x40>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	f003 0301 	and.w	r3, r3, #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d0f9      	beq.n	800022c <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000238:	4b04      	ldr	r3, [pc, #16]	@ (800024c <SPI2_TransmitReceiveByte+0x40>)
 800023a:	68db      	ldr	r3, [r3, #12]
 800023c:	b2db      	uxtb	r3, r3
}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	40003800 	.word	0x40003800

08000250 <SFS_ReadEraseCount>:
* Update Erase Count array in Memory
* Update Block map array in Memory*/


static void SFS_ReadEraseCount(uint32_t *eraseCountArr)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b0c4      	sub	sp, #272	@ 0x110
 8000254:	af00      	add	r7, sp, #0
 8000256:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800025a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800025e:	6018      	str	r0, [r3, #0]
    uint8_t tempBuffer[256];

    W25Q_ReadSecurityRegister(1, 0, tempBuffer, 256);
 8000260:	f107 0208 	add.w	r2, r7, #8
 8000264:	2300      	movs	r3, #0
 8000266:	2100      	movs	r1, #0
 8000268:	2001      	movs	r0, #1
 800026a:	f000 f907 	bl	800047c <W25Q_ReadSecurityRegister>

    for (int i = 0; i < 256; i += 4)
 800026e:	2300      	movs	r3, #0
 8000270:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000274:	e03a      	b.n	80002ec <SFS_ReadEraseCount+0x9c>
    {
        eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 8000276:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800027a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800027e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000282:	4413      	add	r3, r2
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	061a      	lsls	r2, r3, #24
        					   (tempBuffer[i + 1] << 16) |
 8000288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800028c:	3301      	adds	r3, #1
 800028e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000292:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000296:	5ccb      	ldrb	r3, [r1, r3]
 8000298:	041b      	lsls	r3, r3, #16
        eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 800029a:	431a      	orrs	r2, r3
							   (tempBuffer[i + 2] << 8) |
 800029c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80002a0:	3302      	adds	r3, #2
 80002a2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80002a6:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80002aa:	5ccb      	ldrb	r3, [r1, r3]
 80002ac:	021b      	lsls	r3, r3, #8
        					   (tempBuffer[i + 1] << 16) |
 80002ae:	4313      	orrs	r3, r2
							   (tempBuffer[i + 3]);
 80002b0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80002b4:	3203      	adds	r2, #3
 80002b6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80002ba:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80002be:	5c8a      	ldrb	r2, [r1, r2]
							   (tempBuffer[i + 2] << 8) |
 80002c0:	ea43 0102 	orr.w	r1, r3, r2
        eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 80002c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <SFS_ReadEraseCount+0x7e>
 80002cc:	3303      	adds	r3, #3
 80002ce:	109b      	asrs	r3, r3, #2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80002d6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	4413      	add	r3, r2
							   (tempBuffer[i + 2] << 8) |
 80002de:	460a      	mov	r2, r1
        eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 80002e0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 256; i += 4)
 80002e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80002e6:	3304      	adds	r3, #4
 80002e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80002ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80002f0:	2bff      	cmp	r3, #255	@ 0xff
 80002f2:	ddc0      	ble.n	8000276 <SFS_ReadEraseCount+0x26>
    }

    W25Q_ReadSecurityRegister(2, 0, tempBuffer, 256);
 80002f4:	f107 0208 	add.w	r2, r7, #8
 80002f8:	2300      	movs	r3, #0
 80002fa:	2100      	movs	r1, #0
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 f8bd 	bl	800047c <W25Q_ReadSecurityRegister>

    for (int i = 0; i < 256; i += 4)
 8000302:	2300      	movs	r3, #0
 8000304:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000308:	e03b      	b.n	8000382 <SFS_ReadEraseCount+0x132>
    {
        eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 800030a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800030e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000312:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000316:	4413      	add	r3, r2
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	061a      	lsls	r2, r3, #24
        							  (tempBuffer[i + 1] << 16) |
 800031c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000320:	3301      	adds	r3, #1
 8000322:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000326:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800032a:	5ccb      	ldrb	r3, [r1, r3]
 800032c:	041b      	lsls	r3, r3, #16
        eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 800032e:	431a      	orrs	r2, r3
                                      (tempBuffer[i + 2] << 8) |
 8000330:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000334:	3302      	adds	r3, #2
 8000336:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800033a:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800033e:	5ccb      	ldrb	r3, [r1, r3]
 8000340:	021b      	lsls	r3, r3, #8
        							  (tempBuffer[i + 1] << 16) |
 8000342:	4313      	orrs	r3, r2
									  (tempBuffer[i + 3]);
 8000344:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000348:	3203      	adds	r2, #3
 800034a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800034e:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000352:	5c8a      	ldrb	r2, [r1, r2]
                                      (tempBuffer[i + 2] << 8) |
 8000354:	ea43 0102 	orr.w	r1, r3, r2
        eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 8000358:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800035c:	2b00      	cmp	r3, #0
 800035e:	da00      	bge.n	8000362 <SFS_ReadEraseCount+0x112>
 8000360:	3303      	adds	r3, #3
 8000362:	109b      	asrs	r3, r3, #2
 8000364:	3340      	adds	r3, #64	@ 0x40
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800036c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000370:	6812      	ldr	r2, [r2, #0]
 8000372:	4413      	add	r3, r2
                                      (tempBuffer[i + 2] << 8) |
 8000374:	460a      	mov	r2, r1
        eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 8000376:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 256; i += 4)
 8000378:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800037c:	3304      	adds	r3, #4
 800037e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000382:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000386:	2bff      	cmp	r3, #255	@ 0xff
 8000388:	ddbf      	ble.n	800030a <SFS_ReadEraseCount+0xba>
    }
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <SFS_ReadBlockMap>:

static void SFS_ReadBlockMap(uint8_t *blockMapArr)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b0a4      	sub	sp, #144	@ 0x90
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
	uint8_t tempBuffer[128];

    W25Q_ReadSecurityRegister(3, 0, tempBuffer, 128);
 800039e:	f107 020c 	add.w	r2, r7, #12
 80003a2:	2380      	movs	r3, #128	@ 0x80
 80003a4:	2100      	movs	r1, #0
 80003a6:	2003      	movs	r0, #3
 80003a8:	f000 f868 	bl	800047c <W25Q_ReadSecurityRegister>

    for (int i = 0; i < 128; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80003b2:	e00f      	b.n	80003d4 <SFS_ReadBlockMap+0x3e>
    {
        blockMapArr[i] = tempBuffer[i];
 80003b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	4413      	add	r3, r2
 80003bc:	f107 010c 	add.w	r1, r7, #12
 80003c0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80003c4:	440a      	add	r2, r1
 80003c6:	7812      	ldrb	r2, [r2, #0]
 80003c8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 128; i++)
 80003ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003ce:	3301      	adds	r3, #1
 80003d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80003d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80003da:	ddeb      	ble.n	80003b4 <SFS_ReadBlockMap+0x1e>
    }
}
 80003dc:	bf00      	nop
 80003de:	bf00      	nop
 80003e0:	3790      	adds	r7, #144	@ 0x90
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <SFS_ReadFS>:
		printf("File-system already Initialized\n\r");
	}
}

void SFS_ReadFS(uint32_t *eraseCountArr, uint8_t *blockMapArr)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b082      	sub	sp, #8
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	6039      	str	r1, [r7, #0]
	SFS_ReadEraseCount(eraseCountArr);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff2d 	bl	8000250 <SFS_ReadEraseCount>
	SFS_ReadBlockMap(blockMapArr);
 80003f6:	6838      	ldr	r0, [r7, #0]
 80003f8:	f7ff ffcd 	bl	8000396 <SFS_ReadBlockMap>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 800040c:	4b13      	ldr	r3, [pc, #76]	@ (800045c <delay_ms+0x58>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a12      	ldr	r2, [pc, #72]	@ (800045c <delay_ms+0x58>)
 8000412:	f043 0305 	orr.w	r3, r3, #5
 8000416:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 8000418:	4b10      	ldr	r3, [pc, #64]	@ (800045c <delay_ms+0x58>)
 800041a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800041e:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	e009      	b.n	800043a <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 8000426:	bf00      	nop
 8000428:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <delay_ms+0x58>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f9      	beq.n	8000428 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	d3f1      	bcc.n	8000426 <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 8000442:	4b06      	ldr	r3, [pc, #24]	@ (800045c <delay_ms+0x58>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a05      	ldr	r2, [pc, #20]	@ (800045c <delay_ms+0x58>)
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000e010 	.word	0xe000e010

08000460 <W25Q_WriteEnable>:
#include "W25Qxx.h"

static void W25Q_WriteEnable(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000464:	f7ff feb6 	bl	80001d4 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_WRITE);
 8000468:	2006      	movs	r0, #6
 800046a:	f7ff fecf 	bl	800020c <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 800046e:	f7ff febf 	bl	80001f0 <SPI2_DeselectSlave>
	delay_ms(10);
 8000472:	200a      	movs	r0, #10
 8000474:	f7ff ffc6 	bl	8000404 <delay_ms>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <W25Q_ReadSecurityRegister>:
	}
	SPI2_DeselectSlave();
}

void W25Q_ReadSecurityRegister(uint8_t reg, uint8_t offset, uint8_t *data, uint8_t len)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	603a      	str	r2, [r7, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	460b      	mov	r3, r1
 800048c:	71bb      	strb	r3, [r7, #6]
 800048e:	4613      	mov	r3, r2
 8000490:	717b      	strb	r3, [r7, #5]
	uint32_t memAddress;

	switch(reg)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b33      	cmp	r3, #51	@ 0x33
 8000496:	d00e      	beq.n	80004b6 <W25Q_ReadSecurityRegister+0x3a>
 8000498:	2b33      	cmp	r3, #51	@ 0x33
 800049a:	dc10      	bgt.n	80004be <W25Q_ReadSecurityRegister+0x42>
 800049c:	2b31      	cmp	r3, #49	@ 0x31
 800049e:	d002      	beq.n	80004a6 <W25Q_ReadSecurityRegister+0x2a>
 80004a0:	2b32      	cmp	r3, #50	@ 0x32
 80004a2:	d004      	beq.n	80004ae <W25Q_ReadSecurityRegister+0x32>
	{
		case '1':	memAddress = SECURITY_REG_1; break;
		case '2':	memAddress = SECURITY_REG_2; break;
		case '3':	memAddress = SECURITY_REG_3; break;
		default : 	break;
 80004a4:	e00b      	b.n	80004be <W25Q_ReadSecurityRegister+0x42>
		case '1':	memAddress = SECURITY_REG_1; break;
 80004a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e008      	b.n	80004c0 <W25Q_ReadSecurityRegister+0x44>
		case '2':	memAddress = SECURITY_REG_2; break;
 80004ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e004      	b.n	80004c0 <W25Q_ReadSecurityRegister+0x44>
		case '3':	memAddress = SECURITY_REG_3; break;
 80004b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	e000      	b.n	80004c0 <W25Q_ReadSecurityRegister+0x44>
		default : 	break;
 80004be:	bf00      	nop
	}

	memAddress = memAddress + offset;
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4413      	add	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]

	W25Q_WriteEnable();
 80004c8:	f7ff ffca 	bl	8000460 <W25Q_WriteEnable>
	SPI2_SelectSlave();
 80004cc:	f7ff fe82 	bl	80001d4 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(READ_SECURITY_REG);
 80004d0:	2048      	movs	r0, #72	@ 0x48
 80004d2:	f7ff fe9b 	bl	800020c <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	0c1b      	lsrs	r3, r3, #16
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe95 	bl	800020c <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe8f 	bl	800020c <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(memAddress & 0xFF);
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe8a 	bl	800020c <SPI2_TransmitReceiveByte>
	for (uint8_t i = 0; i < len; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	72fb      	strb	r3, [r7, #11]
 80004fc:	e00a      	b.n	8000514 <W25Q_ReadSecurityRegister+0x98>
	{
		// Send dummy byte and receive data
		data[i] = SPI2_TransmitReceiveByte(0xFF);
 80004fe:	7afb      	ldrb	r3, [r7, #11]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	18d4      	adds	r4, r2, r3
 8000504:	20ff      	movs	r0, #255	@ 0xff
 8000506:	f7ff fe81 	bl	800020c <SPI2_TransmitReceiveByte>
 800050a:	4603      	mov	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < len; i++)
 800050e:	7afb      	ldrb	r3, [r7, #11]
 8000510:	3301      	adds	r3, #1
 8000512:	72fb      	strb	r3, [r7, #11]
 8000514:	7afa      	ldrb	r2, [r7, #11]
 8000516:	797b      	ldrb	r3, [r7, #5]
 8000518:	429a      	cmp	r2, r3
 800051a:	d3f0      	bcc.n	80004fe <W25Q_ReadSecurityRegister+0x82>
	}
	SPI2_DeselectSlave();
 800051c:	f7ff fe68 	bl	80001f0 <SPI2_DeselectSlave>
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	bd90      	pop	{r4, r7, pc}

08000528 <main>:
#include <stdint.h>
#include "SWAP_FS.h"

int main()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 800052e:	af00      	add	r7, sp, #0
	uint32_t eraseCountArray[128];
	uint8_t blockMapArray[128];

	SFS_ReadFS(eraseCountArray, blockMapArray);
 8000530:	463a      	mov	r2, r7
 8000532:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000536:	4611      	mov	r1, r2
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff54 	bl	80003e6 <SFS_ReadFS>

	while(1)
 800053e:	bf00      	nop
 8000540:	e7fd      	b.n	800053e <main+0x16>
	...

08000544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	@ (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000548:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	@ (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	@ (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000572:	f000 f811 	bl	8000598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff ffd7 	bl	8000528 <main>

0800057a <LoopForever>:

LoopForever:
  b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000588:	08000600 	.word	0x08000600
  ldr r2, =_sbss
 800058c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000590:	2000001c 	.word	0x2000001c

08000594 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC_IRQHandler>
	...

08000598 <__libc_init_array>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	4d0d      	ldr	r5, [pc, #52]	@ (80005d0 <__libc_init_array+0x38>)
 800059c:	4c0d      	ldr	r4, [pc, #52]	@ (80005d4 <__libc_init_array+0x3c>)
 800059e:	1b64      	subs	r4, r4, r5
 80005a0:	10a4      	asrs	r4, r4, #2
 80005a2:	2600      	movs	r6, #0
 80005a4:	42a6      	cmp	r6, r4
 80005a6:	d109      	bne.n	80005bc <__libc_init_array+0x24>
 80005a8:	4d0b      	ldr	r5, [pc, #44]	@ (80005d8 <__libc_init_array+0x40>)
 80005aa:	4c0c      	ldr	r4, [pc, #48]	@ (80005dc <__libc_init_array+0x44>)
 80005ac:	f000 f818 	bl	80005e0 <_init>
 80005b0:	1b64      	subs	r4, r4, r5
 80005b2:	10a4      	asrs	r4, r4, #2
 80005b4:	2600      	movs	r6, #0
 80005b6:	42a6      	cmp	r6, r4
 80005b8:	d105      	bne.n	80005c6 <__libc_init_array+0x2e>
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c0:	4798      	blx	r3
 80005c2:	3601      	adds	r6, #1
 80005c4:	e7ee      	b.n	80005a4 <__libc_init_array+0xc>
 80005c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ca:	4798      	blx	r3
 80005cc:	3601      	adds	r6, #1
 80005ce:	e7f2      	b.n	80005b6 <__libc_init_array+0x1e>
 80005d0:	080005f8 	.word	0x080005f8
 80005d4:	080005f8 	.word	0x080005f8
 80005d8:	080005f8 	.word	0x080005f8
 80005dc:	080005fc 	.word	0x080005fc

080005e0 <_init>:
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e2:	bf00      	nop
 80005e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e6:	bc08      	pop	{r3}
 80005e8:	469e      	mov	lr, r3
 80005ea:	4770      	bx	lr

080005ec <_fini>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr
