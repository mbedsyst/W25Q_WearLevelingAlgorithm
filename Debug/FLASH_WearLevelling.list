
FLASH_WearLevelling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001864  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08001a04  08001a04  00002a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ae8  08001ae8  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ae8  08001ae8  00002ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001af0  08001af0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001af0  08001af0  00002af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001af4  08001af4  00002af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001af8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001b54  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001b54  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000226a  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ab2  00000000  00000000  000052f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  00005da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000244  00000000  00000000  000060e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010017  00000000  00000000  0000632c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f9d  00000000  00000000  00016343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b28  00000000  00000000  0001a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006fe08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001304  00000000  00000000  0006fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00071150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080019ec 	.word	0x080019ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080019ec 	.word	0x080019ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LED_Init>:
#include "LED.h"

void LED_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <LED_Init+0x58>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a13      	ldr	r2, [pc, #76]	@ (80002d8 <LED_Init+0x58>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 8000290:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <LED_Init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	@ (80002dc <LED_Init+0x5c>)
 8000296:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800029a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 800029c:	4b0f      	ldr	r3, [pc, #60]	@ (80002dc <LED_Init+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	@ (80002dc <LED_Init+0x5c>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a6:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <LED_Init+0x5c>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	@ (80002dc <LED_Init+0x5c>)
 80002ae:	f023 0320 	bic.w	r3, r3, #32
 80002b2:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 80002b4:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <LED_Init+0x5c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a08      	ldr	r2, [pc, #32]	@ (80002dc <LED_Init+0x5c>)
 80002ba:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80002be:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <LED_Init+0x5c>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <LED_Init+0x5c>)
 80002c6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000

080002e0 <LED_Toggle>:
{
	GPIOA->ODR &= ~(1<<5);
}

void LED_Toggle(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= (1U << 5);
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <LED_Toggle+0x1c>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <LED_Toggle+0x1c>)
 80002ea:	f083 0320 	eor.w	r3, r3, #32
 80002ee:	6153      	str	r3, [r2, #20]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40020000 	.word	0x40020000

08000300 <SPI2_SelectSlave>:
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
}

void SPI2_SelectSlave(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <SPI2_SelectSlave+0x18>)
 8000306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800030a:	619a      	str	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40020400 	.word	0x40020400

0800031c <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 8000320:	4b04      	ldr	r3, [pc, #16]	@ (8000334 <SPI2_DeselectSlave+0x18>)
 8000322:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000326:	619a      	str	r2, [r3, #24]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40020400 	.word	0x40020400

08000338 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 8000342:	bf00      	nop
 8000344:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <SPI2_TransmitReceiveByte+0x40>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f9      	beq.n	8000344 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 8000350:	4a09      	ldr	r2, [pc, #36]	@ (8000378 <SPI2_TransmitReceiveByte+0x40>)
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 8000356:	bf00      	nop
 8000358:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <SPI2_TransmitReceiveByte+0x40>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 8000364:	4b04      	ldr	r3, [pc, #16]	@ (8000378 <SPI2_TransmitReceiveByte+0x40>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	b2db      	uxtb	r3, r3
}
 800036a:	4618      	mov	r0, r3
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40003800 	.word	0x40003800

0800037c <SFS_ReadEraseCount>:
* Update Erase Count array in Memory
* Update Block map array in Memory
*/

static void SFS_ReadEraseCount(uint32_t *eraseCountArr)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0c4      	sub	sp, #272	@ 0x110
 8000380:	af00      	add	r7, sp, #0
 8000382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000386:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800038a:	6018      	str	r0, [r3, #0]
	uint8_t tempBuffer[256];

	W25Q_ReadSecurityRegister(1, 0, tempBuffer, 256);
 800038c:	f107 0208 	add.w	r2, r7, #8
 8000390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000394:	2100      	movs	r1, #0
 8000396:	2001      	movs	r0, #1
 8000398:	f000 fa24 	bl	80007e4 <W25Q_ReadSecurityRegister>
	for (int i = 0; i < 256; i += 4)
 800039c:	2300      	movs	r3, #0
 800039e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80003a2:	e03a      	b.n	800041a <SFS_ReadEraseCount+0x9e>
    	{
        	eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 80003a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003a8:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80003ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	061a      	lsls	r2, r3, #24
        						   (tempBuffer[i + 1] << 16) |
 80003b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003ba:	3301      	adds	r3, #1
 80003bc:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80003c0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80003c4:	5ccb      	ldrb	r3, [r1, r3]
 80003c6:	041b      	lsls	r3, r3, #16
        	eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 80003c8:	431a      	orrs	r2, r3
								   (tempBuffer[i + 2] << 8) |
 80003ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003ce:	3302      	adds	r3, #2
 80003d0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80003d4:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80003d8:	5ccb      	ldrb	r3, [r1, r3]
 80003da:	021b      	lsls	r3, r3, #8
        						   (tempBuffer[i + 1] << 16) |
 80003dc:	4313      	orrs	r3, r2
								   (tempBuffer[i + 3]);
 80003de:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80003e2:	3203      	adds	r2, #3
 80003e4:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80003e8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80003ec:	5c8a      	ldrb	r2, [r1, r2]
								   (tempBuffer[i + 2] << 8) |
 80003ee:	ea43 0102 	orr.w	r1, r3, r2
        	eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 80003f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	da00      	bge.n	80003fc <SFS_ReadEraseCount+0x80>
 80003fa:	3303      	adds	r3, #3
 80003fc:	109b      	asrs	r3, r3, #2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000404:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000408:	6812      	ldr	r2, [r2, #0]
 800040a:	4413      	add	r3, r2
								   (tempBuffer[i + 2] << 8) |
 800040c:	460a      	mov	r2, r1
        	eraseCountArr[i / 4] = (tempBuffer[i] << 24) |
 800040e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 256; i += 4)
 8000410:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000414:	3304      	adds	r3, #4
 8000416:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800041a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800041e:	2bff      	cmp	r3, #255	@ 0xff
 8000420:	ddc0      	ble.n	80003a4 <SFS_ReadEraseCount+0x28>
    	}
	
	W25Q_ReadSecurityRegister(2, 0, tempBuffer, 256);
 8000422:	f107 0208 	add.w	r2, r7, #8
 8000426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800042a:	2100      	movs	r1, #0
 800042c:	2002      	movs	r0, #2
 800042e:	f000 f9d9 	bl	80007e4 <W25Q_ReadSecurityRegister>
	for (int i = 0; i < 256; i += 4)
 8000432:	2300      	movs	r3, #0
 8000434:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000438:	e03b      	b.n	80004b2 <SFS_ReadEraseCount+0x136>
    	{
       		eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 800043a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800043e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000442:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000446:	4413      	add	r3, r2
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	061a      	lsls	r2, r3, #24
        				      	  	  	  (tempBuffer[i + 1] << 16) |
 800044c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000450:	3301      	adds	r3, #1
 8000452:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000456:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800045a:	5ccb      	ldrb	r3, [r1, r3]
 800045c:	041b      	lsls	r3, r3, #16
       		eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 800045e:	431a      	orrs	r2, r3
               		                      (tempBuffer[i + 2] << 8) |
 8000460:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000464:	3302      	adds	r3, #2
 8000466:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800046a:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 800046e:	5ccb      	ldrb	r3, [r1, r3]
 8000470:	021b      	lsls	r3, r3, #8
        				      	  	  	  (tempBuffer[i + 1] << 16) |
 8000472:	4313      	orrs	r3, r2
										  (tempBuffer[i + 3]);
 8000474:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000478:	3203      	adds	r2, #3
 800047a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800047e:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000482:	5c8a      	ldrb	r2, [r1, r2]
               		                      (tempBuffer[i + 2] << 8) |
 8000484:	ea43 0102 	orr.w	r1, r3, r2
       		eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 8000488:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <SFS_ReadEraseCount+0x116>
 8000490:	3303      	adds	r3, #3
 8000492:	109b      	asrs	r3, r3, #2
 8000494:	3340      	adds	r3, #64	@ 0x40
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800049c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80004a0:	6812      	ldr	r2, [r2, #0]
 80004a2:	4413      	add	r3, r2
               		                      (tempBuffer[i + 2] << 8) |
 80004a4:	460a      	mov	r2, r1
       		eraseCountArr[(i / 4) + 64] = (tempBuffer[i] << 24) |
 80004a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 256; i += 4)
 80004a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80004ac:	3304      	adds	r3, #4
 80004ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80004b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80004b6:	2bff      	cmp	r3, #255	@ 0xff
 80004b8:	ddbf      	ble.n	800043a <SFS_ReadEraseCount+0xbe>
    	}
}
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <SFS_ReadBlockMap>:

static void SFS_ReadBlockMap(uint8_t *blockMapArr)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b0a4      	sub	sp, #144	@ 0x90
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
	uint8_t tempBuffer[128];
	W25Q_ReadSecurityRegister(3, 0, tempBuffer, 128);
 80004ce:	f107 020c 	add.w	r2, r7, #12
 80004d2:	2380      	movs	r3, #128	@ 0x80
 80004d4:	2100      	movs	r1, #0
 80004d6:	2003      	movs	r0, #3
 80004d8:	f000 f984 	bl	80007e4 <W25Q_ReadSecurityRegister>
	for (int i = 0; i < 128; i++)
 80004dc:	2300      	movs	r3, #0
 80004de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80004e2:	e00f      	b.n	8000504 <SFS_ReadBlockMap+0x3e>
	{
		blockMapArr[i] = tempBuffer[i];
 80004e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4413      	add	r3, r2
 80004ec:	f107 010c 	add.w	r1, r7, #12
 80004f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80004f4:	440a      	add	r2, r1
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 128; i++)
 80004fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004fe:	3301      	adds	r3, #1
 8000500:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000508:	2b7f      	cmp	r3, #127	@ 0x7f
 800050a:	ddeb      	ble.n	80004e4 <SFS_ReadBlockMap+0x1e>
	}
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3790      	adds	r7, #144	@ 0x90
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <SFS_PrintHorizontalLine>:
	W25Q_WriteSecurityRegister(3, regOffset, &position, 1);
}


static void SFS_PrintHorizontalLine(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
    printf("+");
 800051e:	202b      	movs	r0, #43	@ 0x2b
 8000520:	f000 fb6e 	bl	8000c00 <putchar>
    for (int i = 0; i < COLUMNS; i++)
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e005      	b.n	8000536 <SFS_PrintHorizontalLine+0x1e>
    {
        printf("--------+");
 800052a:	4808      	ldr	r0, [pc, #32]	@ (800054c <SFS_PrintHorizontalLine+0x34>)
 800052c:	f000 fb56 	bl	8000bdc <iprintf>
    for (int i = 0; i < COLUMNS; i++)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b07      	cmp	r3, #7
 800053a:	ddf6      	ble.n	800052a <SFS_PrintHorizontalLine+0x12>
    }
    printf("\n");
 800053c:	200a      	movs	r0, #10
 800053e:	f000 fb5f 	bl	8000c00 <putchar>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	08001a04 	.word	0x08001a04

08000550 <SFS_DisplayConsole>:


static void SFS_DisplayConsole(uint32_t *eraseCountArr, uint8_t *blockMap)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	// Set color to Yellow
    printf("\033[33m");
 800055a:	4833      	ldr	r0, [pc, #204]	@ (8000628 <SFS_DisplayConsole+0xd8>)
 800055c:	f000 fb3e 	bl	8000bdc <iprintf>
    printf("Erase Count Array:\n");
 8000560:	4832      	ldr	r0, [pc, #200]	@ (800062c <SFS_DisplayConsole+0xdc>)
 8000562:	f000 fbab 	bl	8000cbc <puts>

    // Print the grid with horizontal and vertical lines
    SFS_PrintHorizontalLine();
 8000566:	f7ff ffd7 	bl	8000518 <SFS_PrintHorizontalLine>
    for (int i = 0; i < ROWS; i++)
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
 800056e:	e021      	b.n	80005b4 <SFS_DisplayConsole+0x64>
    {
        printf("|");
 8000570:	207c      	movs	r0, #124	@ 0x7c
 8000572:	f000 fb45 	bl	8000c00 <putchar>
        for (int j = 0; j < COLUMNS; j++)
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	e010      	b.n	800059e <SFS_DisplayConsole+0x4e>
        {
            int index = i * COLUMNS + j;
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	69ba      	ldr	r2, [r7, #24]
 8000582:	4413      	add	r3, r2
 8000584:	60bb      	str	r3, [r7, #8]
            printf(" %6lu |", eraseCountArr[index]);
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	4827      	ldr	r0, [pc, #156]	@ (8000630 <SFS_DisplayConsole+0xe0>)
 8000594:	f000 fb22 	bl	8000bdc <iprintf>
        for (int j = 0; j < COLUMNS; j++)
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3301      	adds	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	2b07      	cmp	r3, #7
 80005a2:	ddeb      	ble.n	800057c <SFS_DisplayConsole+0x2c>
        }
        printf("\n");
 80005a4:	200a      	movs	r0, #10
 80005a6:	f000 fb2b 	bl	8000c00 <putchar>
        SFS_PrintHorizontalLine();
 80005aa:	f7ff ffb5 	bl	8000518 <SFS_PrintHorizontalLine>
    for (int i = 0; i < ROWS; i++)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	3301      	adds	r3, #1
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	ddda      	ble.n	8000570 <SFS_DisplayConsole+0x20>
    }

    // Set color to white
    printf("\033[37m");
 80005ba:	481e      	ldr	r0, [pc, #120]	@ (8000634 <SFS_DisplayConsole+0xe4>)
 80005bc:	f000 fb0e 	bl	8000bdc <iprintf>
    printf("Block Map Array:\n");
 80005c0:	481d      	ldr	r0, [pc, #116]	@ (8000638 <SFS_DisplayConsole+0xe8>)
 80005c2:	f000 fb7b 	bl	8000cbc <puts>

    SFS_PrintHorizontalLine();
 80005c6:	f7ff ffa7 	bl	8000518 <SFS_PrintHorizontalLine>
    for (int i = 0; i < ROWS; i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	e020      	b.n	8000612 <SFS_DisplayConsole+0xc2>
    {
        printf("|");
 80005d0:	207c      	movs	r0, #124	@ 0x7c
 80005d2:	f000 fb15 	bl	8000c00 <putchar>
        for (int j = 0; j < COLUMNS; j++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	e00f      	b.n	80005fc <SFS_DisplayConsole+0xac>
        {
            int index = i * COLUMNS + j;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
            printf(" %6d |", blockMap[index]);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	683a      	ldr	r2, [r7, #0]
 80005ea:	4413      	add	r3, r2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4812      	ldr	r0, [pc, #72]	@ (800063c <SFS_DisplayConsole+0xec>)
 80005f2:	f000 faf3 	bl	8000bdc <iprintf>
        for (int j = 0; j < COLUMNS; j++)
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	ddec      	ble.n	80005dc <SFS_DisplayConsole+0x8c>
        }
        printf("\n");
 8000602:	200a      	movs	r0, #10
 8000604:	f000 fafc 	bl	8000c00 <putchar>
        SFS_PrintHorizontalLine();
 8000608:	f7ff ff86 	bl	8000518 <SFS_PrintHorizontalLine>
    for (int i = 0; i < ROWS; i++)
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	3301      	adds	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	dddb      	ble.n	80005d0 <SFS_DisplayConsole+0x80>
    }
    printf("\033[0m");
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <SFS_DisplayConsole+0xf0>)
 800061a:	f000 fadf 	bl	8000bdc <iprintf>
}
 800061e:	bf00      	nop
 8000620:	3720      	adds	r7, #32
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	08001a10 	.word	0x08001a10
 800062c:	08001a18 	.word	0x08001a18
 8000630:	08001a2c 	.word	0x08001a2c
 8000634:	08001a34 	.word	0x08001a34
 8000638:	08001a3c 	.word	0x08001a3c
 800063c:	08001a50 	.word	0x08001a50
 8000640:	08001a58 	.word	0x08001a58

08000644 <SFS_UpdateConsole>:

static void SFS_UpdateConsole(uint32_t *eraseCountArr, uint8_t *blockMap)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
    // Move cursor up enough lines to overwrite both arrays (ROWS * 2 + headers + gridlines)
    for (int i = 0; i < (ROWS + 1) * 2 + 4; i++)
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e005      	b.n	8000660 <SFS_UpdateConsole+0x1c>
    {
        printf("\033[A");  // Move cursor up one line
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <SFS_UpdateConsole+0x34>)
 8000656:	f000 fac1 	bl	8000bdc <iprintf>
    for (int i = 0; i < (ROWS + 1) * 2 + 4; i++)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b25      	cmp	r3, #37	@ 0x25
 8000664:	ddf6      	ble.n	8000654 <SFS_UpdateConsole+0x10>
    }
    // Re-display the arrays with updated values
    SFS_DisplayConsole(eraseCountArr, blockMap);
 8000666:	6839      	ldr	r1, [r7, #0]
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff71 	bl	8000550 <SFS_DisplayConsole>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08001a60 	.word	0x08001a60

0800067c <SFS_ReadFS>:
	}
}


void SFS_ReadFS(uint32_t *eraseCountArr, uint8_t *blockMapArr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	SFS_ReadEraseCount(eraseCountArr);
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fe78 	bl	800037c <SFS_ReadEraseCount>
	SFS_ReadBlockMap(blockMapArr);
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff ff1a 	bl	80004c6 <SFS_ReadBlockMap>
	SFS_UpdateConsole(eraseCountArr, blockMapArr);
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffd5 	bl	8000644 <SFS_UpdateConsole>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <delay_ms+0x58>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <delay_ms+0x58>)
 80006b2:	f043 0305 	orr.w	r3, r3, #5
 80006b6:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <delay_ms+0x58>)
 80006ba:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80006be:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e009      	b.n	80006da <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 80006c6:	bf00      	nop
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <delay_ms+0x58>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0f9      	beq.n	80006c8 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3f1      	bcc.n	80006c6 <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <delay_ms+0x58>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <delay_ms+0x58>)
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	085a      	lsrs	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	441a      	add	r2, r3
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	fbb2 f3f3 	udiv	r3, r2, r3
 8000718:	b29b      	uxth	r3, r3
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 8000732:	6839      	ldr	r1, [r7, #0]
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ffe3 	bl	8000700 <Compute_UART_Baud>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	4b03      	ldr	r3, [pc, #12]	@ (800074c <UART2_SetBaudRate+0x24>)
 8000740:	609a      	str	r2, [r3, #8]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400

08000750 <UART2_Init>:

void UART2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <UART2_Init+0x68>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <UART2_Init+0x68>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <UART2_Init+0x68>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a14      	ldr	r2, [pc, #80]	@ (80007b8 <UART2_Init+0x68>)
 8000766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <UART2_Init+0x6c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <UART2_Init+0x6c>)
 8000772:	f023 0310 	bic.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <UART2_Init+0x6c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <UART2_Init+0x6c>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <UART2_Init+0x6c>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <UART2_Init+0x6c>)
 800078a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800078e:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 8000790:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000794:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <UART2_Init+0x70>)
 8000796:	f7ff ffc7 	bl	8000728 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <UART2_Init+0x74>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a09      	ldr	r2, [pc, #36]	@ (80007c4 <UART2_Init+0x74>)
 80007a0:	f043 030c 	orr.w	r3, r3, #12
 80007a4:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <UART2_Init+0x74>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	4a06      	ldr	r2, [pc, #24]	@ (80007c4 <UART2_Init+0x74>)
 80007ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007b0:	60d3      	str	r3, [r2, #12]
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020000 	.word	0x40020000
 80007c0:	00f42400 	.word	0x00f42400
 80007c4:	40004400 	.word	0x40004400

080007c8 <W25Q_WriteEnable>:
#include "W25Qxx.h"

static void W25Q_WriteEnable(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 80007cc:	f7ff fd98 	bl	8000300 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_WRITE);
 80007d0:	2006      	movs	r0, #6
 80007d2:	f7ff fdb1 	bl	8000338 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 80007d6:	f7ff fda1 	bl	800031c <SPI2_DeselectSlave>
	delay_ms(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f7ff ff62 	bl	80006a4 <delay_ms>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <W25Q_ReadSecurityRegister>:
	}
	SPI2_DeselectSlave();
}

void W25Q_ReadSecurityRegister(uint8_t reg, uint8_t offset, uint8_t *data, uint16_t len)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	603a      	str	r2, [r7, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	460b      	mov	r3, r1
 80007f4:	71bb      	strb	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	80bb      	strh	r3, [r7, #4]
	uint32_t memAddress;

	switch(reg)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b33      	cmp	r3, #51	@ 0x33
 80007fe:	d00e      	beq.n	800081e <W25Q_ReadSecurityRegister+0x3a>
 8000800:	2b33      	cmp	r3, #51	@ 0x33
 8000802:	dc10      	bgt.n	8000826 <W25Q_ReadSecurityRegister+0x42>
 8000804:	2b31      	cmp	r3, #49	@ 0x31
 8000806:	d002      	beq.n	800080e <W25Q_ReadSecurityRegister+0x2a>
 8000808:	2b32      	cmp	r3, #50	@ 0x32
 800080a:	d004      	beq.n	8000816 <W25Q_ReadSecurityRegister+0x32>
	{
		case '1':	memAddress = SECURITY_REG_1; break;
		case '2':	memAddress = SECURITY_REG_2; break;
		case '3':	memAddress = SECURITY_REG_3; break;
		default : 	break;
 800080c:	e00b      	b.n	8000826 <W25Q_ReadSecurityRegister+0x42>
		case '1':	memAddress = SECURITY_REG_1; break;
 800080e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e008      	b.n	8000828 <W25Q_ReadSecurityRegister+0x44>
		case '2':	memAddress = SECURITY_REG_2; break;
 8000816:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e004      	b.n	8000828 <W25Q_ReadSecurityRegister+0x44>
		case '3':	memAddress = SECURITY_REG_3; break;
 800081e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	e000      	b.n	8000828 <W25Q_ReadSecurityRegister+0x44>
		default : 	break;
 8000826:	bf00      	nop
	}

	memAddress = memAddress + offset;
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4413      	add	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

	W25Q_WriteEnable();
 8000830:	f7ff ffca 	bl	80007c8 <W25Q_WriteEnable>
	SPI2_SelectSlave();
 8000834:	f7ff fd64 	bl	8000300 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(READ_SECURITY_REG);
 8000838:	2048      	movs	r0, #72	@ 0x48
 800083a:	f7ff fd7d 	bl	8000338 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fd77 	bl	8000338 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd71 	bl	8000338 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(memAddress & 0xFF);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fd6c 	bl	8000338 <SPI2_TransmitReceiveByte>
	for (uint8_t i = 0; i < len; i++)
 8000860:	2300      	movs	r3, #0
 8000862:	72fb      	strb	r3, [r7, #11]
 8000864:	e00a      	b.n	800087c <W25Q_ReadSecurityRegister+0x98>
	{
		// Send dummy byte and receive data
		data[i] = SPI2_TransmitReceiveByte(0xFF);
 8000866:	7afb      	ldrb	r3, [r7, #11]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	18d4      	adds	r4, r2, r3
 800086c:	20ff      	movs	r0, #255	@ 0xff
 800086e:	f7ff fd63 	bl	8000338 <SPI2_TransmitReceiveByte>
 8000872:	4603      	mov	r3, r0
 8000874:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < len; i++)
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	3301      	adds	r3, #1
 800087a:	72fb      	strb	r3, [r7, #11]
 800087c:	7afb      	ldrb	r3, [r7, #11]
 800087e:	b29b      	uxth	r3, r3
 8000880:	88ba      	ldrh	r2, [r7, #4]
 8000882:	429a      	cmp	r2, r3
 8000884:	d8ef      	bhi.n	8000866 <W25Q_ReadSecurityRegister+0x82>
	}
	SPI2_DeselectSlave();
 8000886:	f7ff fd49 	bl	800031c <SPI2_DeselectSlave>
}
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bd90      	pop	{r4, r7, pc}

08000892 <main>:
#include "UART.h"
#include "LED.h"
#include "SWAP_FS.h"

int main()
{
 8000892:	b580      	push	{r7, lr}
 8000894:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 8000898:	af00      	add	r7, sp, #0
	uint32_t eraseCountArray[128];
	uint8_t blockMapArray[128];

	LED_Init();
 800089a:	f7ff fcf1 	bl	8000280 <LED_Init>
	UART2_Init();
 800089e:	f7ff ff57 	bl	8000750 <UART2_Init>

	LED_Toggle();
 80008a2:	f7ff fd1d 	bl	80002e0 <LED_Toggle>
	SFS_ReadFS(eraseCountArray, blockMapArray);
 80008a6:	463a      	mov	r2, r7
 80008a8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fee4 	bl	800067c <SFS_ReadFS>
	LED_Toggle();
 80008b4:	f7ff fd14 	bl	80002e0 <LED_Toggle>

	while(1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <main+0x26>

080008bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00a      	b.n	80008e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ce:	f3af 8000 	nop.w
 80008d2:	4601      	mov	r1, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <_read+0x12>
  }

  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e009      	b.n	800091c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	60ba      	str	r2, [r7, #8]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	3301      	adds	r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	429a      	cmp	r2, r3
 8000922:	dbf1      	blt.n	8000908 <_write+0x12>
  }
  return len;
 8000924:	687b      	ldr	r3, [r7, #4]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <_close>:

int _close(int file)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000956:	605a      	str	r2, [r3, #4]
  return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_isatty>:

int _isatty(int file)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	@ (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f000 faa6 	bl	8000f18 <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <_sbrk+0x64>)
 80009e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20018000 	.word	0x20018000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	20000078 	.word	0x20000078
 8000a00:	200001c8 	.word	0x200001c8

08000a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a32:	f000 fa77 	bl	8000f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a36:	f7ff ff2c 	bl	8000892 <main>

08000a3a <LoopForever>:

LoopForever:
  b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a48:	08001af8 	.word	0x08001af8
  ldr r2, =_sbss
 8000a4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a50:	200001c8 	.word	0x200001c8

08000a54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <std>:
 8000a58:	2300      	movs	r3, #0
 8000a5a:	b510      	push	{r4, lr}
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a66:	6083      	str	r3, [r0, #8]
 8000a68:	8181      	strh	r1, [r0, #12]
 8000a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a6c:	81c2      	strh	r2, [r0, #14]
 8000a6e:	6183      	str	r3, [r0, #24]
 8000a70:	4619      	mov	r1, r3
 8000a72:	2208      	movs	r2, #8
 8000a74:	305c      	adds	r0, #92	@ 0x5c
 8000a76:	f000 fa01 	bl	8000e7c <memset>
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <std+0x58>)
 8000a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <std+0x5c>)
 8000a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000a82:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <std+0x60>)
 8000a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <std+0x64>)
 8000a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <std+0x68>)
 8000a8c:	6224      	str	r4, [r4, #32]
 8000a8e:	429c      	cmp	r4, r3
 8000a90:	d006      	beq.n	8000aa0 <std+0x48>
 8000a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a96:	4294      	cmp	r4, r2
 8000a98:	d002      	beq.n	8000aa0 <std+0x48>
 8000a9a:	33d0      	adds	r3, #208	@ 0xd0
 8000a9c:	429c      	cmp	r4, r3
 8000a9e:	d105      	bne.n	8000aac <std+0x54>
 8000aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa8:	f000 ba60 	b.w	8000f6c <__retarget_lock_init_recursive>
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	08000ccd 	.word	0x08000ccd
 8000ab4:	08000cef 	.word	0x08000cef
 8000ab8:	08000d27 	.word	0x08000d27
 8000abc:	08000d4b 	.word	0x08000d4b
 8000ac0:	2000007c 	.word	0x2000007c

08000ac4 <stdio_exit_handler>:
 8000ac4:	4a02      	ldr	r2, [pc, #8]	@ (8000ad0 <stdio_exit_handler+0xc>)
 8000ac6:	4903      	ldr	r1, [pc, #12]	@ (8000ad4 <stdio_exit_handler+0x10>)
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <stdio_exit_handler+0x14>)
 8000aca:	f000 b869 	b.w	8000ba0 <_fwalk_sglue>
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	0800180d 	.word	0x0800180d
 8000ad8:	20000010 	.word	0x20000010

08000adc <cleanup_stdio>:
 8000adc:	6841      	ldr	r1, [r0, #4]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <cleanup_stdio+0x34>)
 8000ae0:	4299      	cmp	r1, r3
 8000ae2:	b510      	push	{r4, lr}
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	d001      	beq.n	8000aec <cleanup_stdio+0x10>
 8000ae8:	f000 fe90 	bl	800180c <_fflush_r>
 8000aec:	68a1      	ldr	r1, [r4, #8]
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <cleanup_stdio+0x38>)
 8000af0:	4299      	cmp	r1, r3
 8000af2:	d002      	beq.n	8000afa <cleanup_stdio+0x1e>
 8000af4:	4620      	mov	r0, r4
 8000af6:	f000 fe89 	bl	800180c <_fflush_r>
 8000afa:	68e1      	ldr	r1, [r4, #12]
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <cleanup_stdio+0x3c>)
 8000afe:	4299      	cmp	r1, r3
 8000b00:	d004      	beq.n	8000b0c <cleanup_stdio+0x30>
 8000b02:	4620      	mov	r0, r4
 8000b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b08:	f000 be80 	b.w	800180c <_fflush_r>
 8000b0c:	bd10      	pop	{r4, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000007c 	.word	0x2000007c
 8000b14:	200000e4 	.word	0x200000e4
 8000b18:	2000014c 	.word	0x2000014c

08000b1c <global_stdio_init.part.0>:
 8000b1c:	b510      	push	{r4, lr}
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <global_stdio_init.part.0+0x30>)
 8000b20:	4c0b      	ldr	r4, [pc, #44]	@ (8000b50 <global_stdio_init.part.0+0x34>)
 8000b22:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <global_stdio_init.part.0+0x38>)
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	4620      	mov	r0, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	f7ff ff94 	bl	8000a58 <std>
 8000b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000b34:	2201      	movs	r2, #1
 8000b36:	2109      	movs	r1, #9
 8000b38:	f7ff ff8e 	bl	8000a58 <std>
 8000b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000b40:	2202      	movs	r2, #2
 8000b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b46:	2112      	movs	r1, #18
 8000b48:	f7ff bf86 	b.w	8000a58 <std>
 8000b4c:	200001b4 	.word	0x200001b4
 8000b50:	2000007c 	.word	0x2000007c
 8000b54:	08000ac5 	.word	0x08000ac5

08000b58 <__sfp_lock_acquire>:
 8000b58:	4801      	ldr	r0, [pc, #4]	@ (8000b60 <__sfp_lock_acquire+0x8>)
 8000b5a:	f000 ba08 	b.w	8000f6e <__retarget_lock_acquire_recursive>
 8000b5e:	bf00      	nop
 8000b60:	200001bd 	.word	0x200001bd

08000b64 <__sfp_lock_release>:
 8000b64:	4801      	ldr	r0, [pc, #4]	@ (8000b6c <__sfp_lock_release+0x8>)
 8000b66:	f000 ba03 	b.w	8000f70 <__retarget_lock_release_recursive>
 8000b6a:	bf00      	nop
 8000b6c:	200001bd 	.word	0x200001bd

08000b70 <__sinit>:
 8000b70:	b510      	push	{r4, lr}
 8000b72:	4604      	mov	r4, r0
 8000b74:	f7ff fff0 	bl	8000b58 <__sfp_lock_acquire>
 8000b78:	6a23      	ldr	r3, [r4, #32]
 8000b7a:	b11b      	cbz	r3, 8000b84 <__sinit+0x14>
 8000b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b80:	f7ff bff0 	b.w	8000b64 <__sfp_lock_release>
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__sinit+0x28>)
 8000b86:	6223      	str	r3, [r4, #32]
 8000b88:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__sinit+0x2c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1f5      	bne.n	8000b7c <__sinit+0xc>
 8000b90:	f7ff ffc4 	bl	8000b1c <global_stdio_init.part.0>
 8000b94:	e7f2      	b.n	8000b7c <__sinit+0xc>
 8000b96:	bf00      	nop
 8000b98:	08000add 	.word	0x08000add
 8000b9c:	200001b4 	.word	0x200001b4

08000ba0 <_fwalk_sglue>:
 8000ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba4:	4607      	mov	r7, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	4614      	mov	r4, r2
 8000baa:	2600      	movs	r6, #0
 8000bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8000bb4:	d505      	bpl.n	8000bc2 <_fwalk_sglue+0x22>
 8000bb6:	6824      	ldr	r4, [r4, #0]
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d1f7      	bne.n	8000bac <_fwalk_sglue+0xc>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc2:	89ab      	ldrh	r3, [r5, #12]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d907      	bls.n	8000bd8 <_fwalk_sglue+0x38>
 8000bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	d003      	beq.n	8000bd8 <_fwalk_sglue+0x38>
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	47c0      	blx	r8
 8000bd6:	4306      	orrs	r6, r0
 8000bd8:	3568      	adds	r5, #104	@ 0x68
 8000bda:	e7e9      	b.n	8000bb0 <_fwalk_sglue+0x10>

08000bdc <iprintf>:
 8000bdc:	b40f      	push	{r0, r1, r2, r3}
 8000bde:	b507      	push	{r0, r1, r2, lr}
 8000be0:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <iprintf+0x20>)
 8000be2:	ab04      	add	r3, sp, #16
 8000be4:	6808      	ldr	r0, [r1, #0]
 8000be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bea:	6881      	ldr	r1, [r0, #8]
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	f000 fae3 	bl	80011b8 <_vfiprintf_r>
 8000bf2:	b003      	add	sp, #12
 8000bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr
 8000bfc:	2000000c 	.word	0x2000000c

08000c00 <putchar>:
 8000c00:	4b02      	ldr	r3, [pc, #8]	@ (8000c0c <putchar+0xc>)
 8000c02:	4601      	mov	r1, r0
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	6882      	ldr	r2, [r0, #8]
 8000c08:	f000 be8a 	b.w	8001920 <_putc_r>
 8000c0c:	2000000c 	.word	0x2000000c

08000c10 <_puts_r>:
 8000c10:	6a03      	ldr	r3, [r0, #32]
 8000c12:	b570      	push	{r4, r5, r6, lr}
 8000c14:	6884      	ldr	r4, [r0, #8]
 8000c16:	4605      	mov	r5, r0
 8000c18:	460e      	mov	r6, r1
 8000c1a:	b90b      	cbnz	r3, 8000c20 <_puts_r+0x10>
 8000c1c:	f7ff ffa8 	bl	8000b70 <__sinit>
 8000c20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c22:	07db      	lsls	r3, r3, #31
 8000c24:	d405      	bmi.n	8000c32 <_puts_r+0x22>
 8000c26:	89a3      	ldrh	r3, [r4, #12]
 8000c28:	0598      	lsls	r0, r3, #22
 8000c2a:	d402      	bmi.n	8000c32 <_puts_r+0x22>
 8000c2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c2e:	f000 f99e 	bl	8000f6e <__retarget_lock_acquire_recursive>
 8000c32:	89a3      	ldrh	r3, [r4, #12]
 8000c34:	0719      	lsls	r1, r3, #28
 8000c36:	d502      	bpl.n	8000c3e <_puts_r+0x2e>
 8000c38:	6923      	ldr	r3, [r4, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d135      	bne.n	8000caa <_puts_r+0x9a>
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 f8c5 	bl	8000dd0 <__swsetup_r>
 8000c46:	b380      	cbz	r0, 8000caa <_puts_r+0x9a>
 8000c48:	f04f 35ff 	mov.w	r5, #4294967295
 8000c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c4e:	07da      	lsls	r2, r3, #31
 8000c50:	d405      	bmi.n	8000c5e <_puts_r+0x4e>
 8000c52:	89a3      	ldrh	r3, [r4, #12]
 8000c54:	059b      	lsls	r3, r3, #22
 8000c56:	d402      	bmi.n	8000c5e <_puts_r+0x4e>
 8000c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c5a:	f000 f989 	bl	8000f70 <__retarget_lock_release_recursive>
 8000c5e:	4628      	mov	r0, r5
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da04      	bge.n	8000c70 <_puts_r+0x60>
 8000c66:	69a2      	ldr	r2, [r4, #24]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dc17      	bgt.n	8000c9c <_puts_r+0x8c>
 8000c6c:	290a      	cmp	r1, #10
 8000c6e:	d015      	beq.n	8000c9c <_puts_r+0x8c>
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	6022      	str	r2, [r4, #0]
 8000c76:	7019      	strb	r1, [r3, #0]
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	60a3      	str	r3, [r4, #8]
 8000c82:	2900      	cmp	r1, #0
 8000c84:	d1ed      	bne.n	8000c62 <_puts_r+0x52>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	da11      	bge.n	8000cae <_puts_r+0x9e>
 8000c8a:	4622      	mov	r2, r4
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	4628      	mov	r0, r5
 8000c90:	f000 f85f 	bl	8000d52 <__swbuf_r>
 8000c94:	3001      	adds	r0, #1
 8000c96:	d0d7      	beq.n	8000c48 <_puts_r+0x38>
 8000c98:	250a      	movs	r5, #10
 8000c9a:	e7d7      	b.n	8000c4c <_puts_r+0x3c>
 8000c9c:	4622      	mov	r2, r4
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	f000 f857 	bl	8000d52 <__swbuf_r>
 8000ca4:	3001      	adds	r0, #1
 8000ca6:	d1e7      	bne.n	8000c78 <_puts_r+0x68>
 8000ca8:	e7ce      	b.n	8000c48 <_puts_r+0x38>
 8000caa:	3e01      	subs	r6, #1
 8000cac:	e7e4      	b.n	8000c78 <_puts_r+0x68>
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	6022      	str	r2, [r4, #0]
 8000cb4:	220a      	movs	r2, #10
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	e7ee      	b.n	8000c98 <_puts_r+0x88>
	...

08000cbc <puts>:
 8000cbc:	4b02      	ldr	r3, [pc, #8]	@ (8000cc8 <puts+0xc>)
 8000cbe:	4601      	mov	r1, r0
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f7ff bfa5 	b.w	8000c10 <_puts_r>
 8000cc6:	bf00      	nop
 8000cc8:	2000000c 	.word	0x2000000c

08000ccc <__sread>:
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	460c      	mov	r4, r1
 8000cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cd4:	f000 f8fc 	bl	8000ed0 <_read_r>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	bfab      	itete	ge
 8000cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000cde:	89a3      	ldrhlt	r3, [r4, #12]
 8000ce0:	181b      	addge	r3, r3, r0
 8000ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000ce6:	bfac      	ite	ge
 8000ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000cea:	81a3      	strhlt	r3, [r4, #12]
 8000cec:	bd10      	pop	{r4, pc}

08000cee <__swrite>:
 8000cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf2:	461f      	mov	r7, r3
 8000cf4:	898b      	ldrh	r3, [r1, #12]
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	4605      	mov	r5, r0
 8000cfa:	460c      	mov	r4, r1
 8000cfc:	4616      	mov	r6, r2
 8000cfe:	d505      	bpl.n	8000d0c <__swrite+0x1e>
 8000d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d04:	2302      	movs	r3, #2
 8000d06:	2200      	movs	r2, #0
 8000d08:	f000 f8d0 	bl	8000eac <_lseek_r>
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d16:	81a3      	strh	r3, [r4, #12]
 8000d18:	4632      	mov	r2, r6
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d22:	f000 b8e7 	b.w	8000ef4 <_write_r>

08000d26 <__sseek>:
 8000d26:	b510      	push	{r4, lr}
 8000d28:	460c      	mov	r4, r1
 8000d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d2e:	f000 f8bd 	bl	8000eac <_lseek_r>
 8000d32:	1c43      	adds	r3, r0, #1
 8000d34:	89a3      	ldrh	r3, [r4, #12]
 8000d36:	bf15      	itete	ne
 8000d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000d42:	81a3      	strheq	r3, [r4, #12]
 8000d44:	bf18      	it	ne
 8000d46:	81a3      	strhne	r3, [r4, #12]
 8000d48:	bd10      	pop	{r4, pc}

08000d4a <__sclose>:
 8000d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d4e:	f000 b89d 	b.w	8000e8c <_close_r>

08000d52 <__swbuf_r>:
 8000d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d54:	460e      	mov	r6, r1
 8000d56:	4614      	mov	r4, r2
 8000d58:	4605      	mov	r5, r0
 8000d5a:	b118      	cbz	r0, 8000d64 <__swbuf_r+0x12>
 8000d5c:	6a03      	ldr	r3, [r0, #32]
 8000d5e:	b90b      	cbnz	r3, 8000d64 <__swbuf_r+0x12>
 8000d60:	f7ff ff06 	bl	8000b70 <__sinit>
 8000d64:	69a3      	ldr	r3, [r4, #24]
 8000d66:	60a3      	str	r3, [r4, #8]
 8000d68:	89a3      	ldrh	r3, [r4, #12]
 8000d6a:	071a      	lsls	r2, r3, #28
 8000d6c:	d501      	bpl.n	8000d72 <__swbuf_r+0x20>
 8000d6e:	6923      	ldr	r3, [r4, #16]
 8000d70:	b943      	cbnz	r3, 8000d84 <__swbuf_r+0x32>
 8000d72:	4621      	mov	r1, r4
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f82b 	bl	8000dd0 <__swsetup_r>
 8000d7a:	b118      	cbz	r0, 8000d84 <__swbuf_r+0x32>
 8000d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8000d80:	4638      	mov	r0, r7
 8000d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d84:	6823      	ldr	r3, [r4, #0]
 8000d86:	6922      	ldr	r2, [r4, #16]
 8000d88:	1a98      	subs	r0, r3, r2
 8000d8a:	6963      	ldr	r3, [r4, #20]
 8000d8c:	b2f6      	uxtb	r6, r6
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	4637      	mov	r7, r6
 8000d92:	dc05      	bgt.n	8000da0 <__swbuf_r+0x4e>
 8000d94:	4621      	mov	r1, r4
 8000d96:	4628      	mov	r0, r5
 8000d98:	f000 fd38 	bl	800180c <_fflush_r>
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d1ed      	bne.n	8000d7c <__swbuf_r+0x2a>
 8000da0:	68a3      	ldr	r3, [r4, #8]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	60a3      	str	r3, [r4, #8]
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	6022      	str	r2, [r4, #0]
 8000dac:	701e      	strb	r6, [r3, #0]
 8000dae:	6962      	ldr	r2, [r4, #20]
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__swbuf_r+0x6e>
 8000db6:	89a3      	ldrh	r3, [r4, #12]
 8000db8:	07db      	lsls	r3, r3, #31
 8000dba:	d5e1      	bpl.n	8000d80 <__swbuf_r+0x2e>
 8000dbc:	2e0a      	cmp	r6, #10
 8000dbe:	d1df      	bne.n	8000d80 <__swbuf_r+0x2e>
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	4628      	mov	r0, r5
 8000dc4:	f000 fd22 	bl	800180c <_fflush_r>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d0d9      	beq.n	8000d80 <__swbuf_r+0x2e>
 8000dcc:	e7d6      	b.n	8000d7c <__swbuf_r+0x2a>
	...

08000dd0 <__swsetup_r>:
 8000dd0:	b538      	push	{r3, r4, r5, lr}
 8000dd2:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <__swsetup_r+0xa8>)
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	460c      	mov	r4, r1
 8000dda:	b118      	cbz	r0, 8000de4 <__swsetup_r+0x14>
 8000ddc:	6a03      	ldr	r3, [r0, #32]
 8000dde:	b90b      	cbnz	r3, 8000de4 <__swsetup_r+0x14>
 8000de0:	f7ff fec6 	bl	8000b70 <__sinit>
 8000de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000de8:	0719      	lsls	r1, r3, #28
 8000dea:	d422      	bmi.n	8000e32 <__swsetup_r+0x62>
 8000dec:	06da      	lsls	r2, r3, #27
 8000dee:	d407      	bmi.n	8000e00 <__swsetup_r+0x30>
 8000df0:	2209      	movs	r2, #9
 8000df2:	602a      	str	r2, [r5, #0]
 8000df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000df8:	81a3      	strh	r3, [r4, #12]
 8000dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfe:	e033      	b.n	8000e68 <__swsetup_r+0x98>
 8000e00:	0758      	lsls	r0, r3, #29
 8000e02:	d512      	bpl.n	8000e2a <__swsetup_r+0x5a>
 8000e04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e06:	b141      	cbz	r1, 8000e1a <__swsetup_r+0x4a>
 8000e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d002      	beq.n	8000e16 <__swsetup_r+0x46>
 8000e10:	4628      	mov	r0, r5
 8000e12:	f000 f8af 	bl	8000f74 <_free_r>
 8000e16:	2300      	movs	r3, #0
 8000e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e1a:	89a3      	ldrh	r3, [r4, #12]
 8000e1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e20:	81a3      	strh	r3, [r4, #12]
 8000e22:	2300      	movs	r3, #0
 8000e24:	6063      	str	r3, [r4, #4]
 8000e26:	6923      	ldr	r3, [r4, #16]
 8000e28:	6023      	str	r3, [r4, #0]
 8000e2a:	89a3      	ldrh	r3, [r4, #12]
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	81a3      	strh	r3, [r4, #12]
 8000e32:	6923      	ldr	r3, [r4, #16]
 8000e34:	b94b      	cbnz	r3, 8000e4a <__swsetup_r+0x7a>
 8000e36:	89a3      	ldrh	r3, [r4, #12]
 8000e38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e40:	d003      	beq.n	8000e4a <__swsetup_r+0x7a>
 8000e42:	4621      	mov	r1, r4
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fd2f 	bl	80018a8 <__smakebuf_r>
 8000e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e4e:	f013 0201 	ands.w	r2, r3, #1
 8000e52:	d00a      	beq.n	8000e6a <__swsetup_r+0x9a>
 8000e54:	2200      	movs	r2, #0
 8000e56:	60a2      	str	r2, [r4, #8]
 8000e58:	6962      	ldr	r2, [r4, #20]
 8000e5a:	4252      	negs	r2, r2
 8000e5c:	61a2      	str	r2, [r4, #24]
 8000e5e:	6922      	ldr	r2, [r4, #16]
 8000e60:	b942      	cbnz	r2, 8000e74 <__swsetup_r+0xa4>
 8000e62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000e66:	d1c5      	bne.n	8000df4 <__swsetup_r+0x24>
 8000e68:	bd38      	pop	{r3, r4, r5, pc}
 8000e6a:	0799      	lsls	r1, r3, #30
 8000e6c:	bf58      	it	pl
 8000e6e:	6962      	ldrpl	r2, [r4, #20]
 8000e70:	60a2      	str	r2, [r4, #8]
 8000e72:	e7f4      	b.n	8000e5e <__swsetup_r+0x8e>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7f7      	b.n	8000e68 <__swsetup_r+0x98>
 8000e78:	2000000c 	.word	0x2000000c

08000e7c <memset>:
 8000e7c:	4402      	add	r2, r0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d100      	bne.n	8000e86 <memset+0xa>
 8000e84:	4770      	bx	lr
 8000e86:	f803 1b01 	strb.w	r1, [r3], #1
 8000e8a:	e7f9      	b.n	8000e80 <memset+0x4>

08000e8c <_close_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4d06      	ldr	r5, [pc, #24]	@ (8000ea8 <_close_r+0x1c>)
 8000e90:	2300      	movs	r3, #0
 8000e92:	4604      	mov	r4, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	602b      	str	r3, [r5, #0]
 8000e98:	f7ff fd49 	bl	800092e <_close>
 8000e9c:	1c43      	adds	r3, r0, #1
 8000e9e:	d102      	bne.n	8000ea6 <_close_r+0x1a>
 8000ea0:	682b      	ldr	r3, [r5, #0]
 8000ea2:	b103      	cbz	r3, 8000ea6 <_close_r+0x1a>
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	200001b8 	.word	0x200001b8

08000eac <_lseek_r>:
 8000eac:	b538      	push	{r3, r4, r5, lr}
 8000eae:	4d07      	ldr	r5, [pc, #28]	@ (8000ecc <_lseek_r+0x20>)
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	602a      	str	r2, [r5, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	f7ff fd5e 	bl	800097c <_lseek>
 8000ec0:	1c43      	adds	r3, r0, #1
 8000ec2:	d102      	bne.n	8000eca <_lseek_r+0x1e>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	b103      	cbz	r3, 8000eca <_lseek_r+0x1e>
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
 8000ecc:	200001b8 	.word	0x200001b8

08000ed0 <_read_r>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4d07      	ldr	r5, [pc, #28]	@ (8000ef0 <_read_r+0x20>)
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	4611      	mov	r1, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	602a      	str	r2, [r5, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	f7ff fcec 	bl	80008bc <_read>
 8000ee4:	1c43      	adds	r3, r0, #1
 8000ee6:	d102      	bne.n	8000eee <_read_r+0x1e>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	b103      	cbz	r3, 8000eee <_read_r+0x1e>
 8000eec:	6023      	str	r3, [r4, #0]
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
 8000ef0:	200001b8 	.word	0x200001b8

08000ef4 <_write_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d07      	ldr	r5, [pc, #28]	@ (8000f14 <_write_r+0x20>)
 8000ef8:	4604      	mov	r4, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4611      	mov	r1, r2
 8000efe:	2200      	movs	r2, #0
 8000f00:	602a      	str	r2, [r5, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	f7ff fcf7 	bl	80008f6 <_write>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d102      	bne.n	8000f12 <_write_r+0x1e>
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	b103      	cbz	r3, 8000f12 <_write_r+0x1e>
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	200001b8 	.word	0x200001b8

08000f18 <__errno>:
 8000f18:	4b01      	ldr	r3, [pc, #4]	@ (8000f20 <__errno+0x8>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <__libc_init_array>:
 8000f24:	b570      	push	{r4, r5, r6, lr}
 8000f26:	4d0d      	ldr	r5, [pc, #52]	@ (8000f5c <__libc_init_array+0x38>)
 8000f28:	4c0d      	ldr	r4, [pc, #52]	@ (8000f60 <__libc_init_array+0x3c>)
 8000f2a:	1b64      	subs	r4, r4, r5
 8000f2c:	10a4      	asrs	r4, r4, #2
 8000f2e:	2600      	movs	r6, #0
 8000f30:	42a6      	cmp	r6, r4
 8000f32:	d109      	bne.n	8000f48 <__libc_init_array+0x24>
 8000f34:	4d0b      	ldr	r5, [pc, #44]	@ (8000f64 <__libc_init_array+0x40>)
 8000f36:	4c0c      	ldr	r4, [pc, #48]	@ (8000f68 <__libc_init_array+0x44>)
 8000f38:	f000 fd58 	bl	80019ec <_init>
 8000f3c:	1b64      	subs	r4, r4, r5
 8000f3e:	10a4      	asrs	r4, r4, #2
 8000f40:	2600      	movs	r6, #0
 8000f42:	42a6      	cmp	r6, r4
 8000f44:	d105      	bne.n	8000f52 <__libc_init_array+0x2e>
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f4c:	4798      	blx	r3
 8000f4e:	3601      	adds	r6, #1
 8000f50:	e7ee      	b.n	8000f30 <__libc_init_array+0xc>
 8000f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f56:	4798      	blx	r3
 8000f58:	3601      	adds	r6, #1
 8000f5a:	e7f2      	b.n	8000f42 <__libc_init_array+0x1e>
 8000f5c:	08001af0 	.word	0x08001af0
 8000f60:	08001af0 	.word	0x08001af0
 8000f64:	08001af0 	.word	0x08001af0
 8000f68:	08001af4 	.word	0x08001af4

08000f6c <__retarget_lock_init_recursive>:
 8000f6c:	4770      	bx	lr

08000f6e <__retarget_lock_acquire_recursive>:
 8000f6e:	4770      	bx	lr

08000f70 <__retarget_lock_release_recursive>:
 8000f70:	4770      	bx	lr
	...

08000f74 <_free_r>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	4605      	mov	r5, r0
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d041      	beq.n	8001000 <_free_r+0x8c>
 8000f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f80:	1f0c      	subs	r4, r1, #4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfb8      	it	lt
 8000f86:	18e4      	addlt	r4, r4, r3
 8000f88:	f000 f8e0 	bl	800114c <__malloc_lock>
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001004 <_free_r+0x90>)
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	b933      	cbnz	r3, 8000fa0 <_free_r+0x2c>
 8000f92:	6063      	str	r3, [r4, #4]
 8000f94:	6014      	str	r4, [r2, #0]
 8000f96:	4628      	mov	r0, r5
 8000f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f9c:	f000 b8dc 	b.w	8001158 <__malloc_unlock>
 8000fa0:	42a3      	cmp	r3, r4
 8000fa2:	d908      	bls.n	8000fb6 <_free_r+0x42>
 8000fa4:	6820      	ldr	r0, [r4, #0]
 8000fa6:	1821      	adds	r1, r4, r0
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	bf01      	itttt	eq
 8000fac:	6819      	ldreq	r1, [r3, #0]
 8000fae:	685b      	ldreq	r3, [r3, #4]
 8000fb0:	1809      	addeq	r1, r1, r0
 8000fb2:	6021      	streq	r1, [r4, #0]
 8000fb4:	e7ed      	b.n	8000f92 <_free_r+0x1e>
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	b10b      	cbz	r3, 8000fc0 <_free_r+0x4c>
 8000fbc:	42a3      	cmp	r3, r4
 8000fbe:	d9fa      	bls.n	8000fb6 <_free_r+0x42>
 8000fc0:	6811      	ldr	r1, [r2, #0]
 8000fc2:	1850      	adds	r0, r2, r1
 8000fc4:	42a0      	cmp	r0, r4
 8000fc6:	d10b      	bne.n	8000fe0 <_free_r+0x6c>
 8000fc8:	6820      	ldr	r0, [r4, #0]
 8000fca:	4401      	add	r1, r0
 8000fcc:	1850      	adds	r0, r2, r1
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	6011      	str	r1, [r2, #0]
 8000fd2:	d1e0      	bne.n	8000f96 <_free_r+0x22>
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	6053      	str	r3, [r2, #4]
 8000fda:	4408      	add	r0, r1
 8000fdc:	6010      	str	r0, [r2, #0]
 8000fde:	e7da      	b.n	8000f96 <_free_r+0x22>
 8000fe0:	d902      	bls.n	8000fe8 <_free_r+0x74>
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	602b      	str	r3, [r5, #0]
 8000fe6:	e7d6      	b.n	8000f96 <_free_r+0x22>
 8000fe8:	6820      	ldr	r0, [r4, #0]
 8000fea:	1821      	adds	r1, r4, r0
 8000fec:	428b      	cmp	r3, r1
 8000fee:	bf04      	itt	eq
 8000ff0:	6819      	ldreq	r1, [r3, #0]
 8000ff2:	685b      	ldreq	r3, [r3, #4]
 8000ff4:	6063      	str	r3, [r4, #4]
 8000ff6:	bf04      	itt	eq
 8000ff8:	1809      	addeq	r1, r1, r0
 8000ffa:	6021      	streq	r1, [r4, #0]
 8000ffc:	6054      	str	r4, [r2, #4]
 8000ffe:	e7ca      	b.n	8000f96 <_free_r+0x22>
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop
 8001004:	200001c4 	.word	0x200001c4

08001008 <sbrk_aligned>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	4e0f      	ldr	r6, [pc, #60]	@ (8001048 <sbrk_aligned+0x40>)
 800100c:	460c      	mov	r4, r1
 800100e:	6831      	ldr	r1, [r6, #0]
 8001010:	4605      	mov	r5, r0
 8001012:	b911      	cbnz	r1, 800101a <sbrk_aligned+0x12>
 8001014:	f000 fcda 	bl	80019cc <_sbrk_r>
 8001018:	6030      	str	r0, [r6, #0]
 800101a:	4621      	mov	r1, r4
 800101c:	4628      	mov	r0, r5
 800101e:	f000 fcd5 	bl	80019cc <_sbrk_r>
 8001022:	1c43      	adds	r3, r0, #1
 8001024:	d103      	bne.n	800102e <sbrk_aligned+0x26>
 8001026:	f04f 34ff 	mov.w	r4, #4294967295
 800102a:	4620      	mov	r0, r4
 800102c:	bd70      	pop	{r4, r5, r6, pc}
 800102e:	1cc4      	adds	r4, r0, #3
 8001030:	f024 0403 	bic.w	r4, r4, #3
 8001034:	42a0      	cmp	r0, r4
 8001036:	d0f8      	beq.n	800102a <sbrk_aligned+0x22>
 8001038:	1a21      	subs	r1, r4, r0
 800103a:	4628      	mov	r0, r5
 800103c:	f000 fcc6 	bl	80019cc <_sbrk_r>
 8001040:	3001      	adds	r0, #1
 8001042:	d1f2      	bne.n	800102a <sbrk_aligned+0x22>
 8001044:	e7ef      	b.n	8001026 <sbrk_aligned+0x1e>
 8001046:	bf00      	nop
 8001048:	200001c0 	.word	0x200001c0

0800104c <_malloc_r>:
 800104c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001050:	1ccd      	adds	r5, r1, #3
 8001052:	f025 0503 	bic.w	r5, r5, #3
 8001056:	3508      	adds	r5, #8
 8001058:	2d0c      	cmp	r5, #12
 800105a:	bf38      	it	cc
 800105c:	250c      	movcc	r5, #12
 800105e:	2d00      	cmp	r5, #0
 8001060:	4606      	mov	r6, r0
 8001062:	db01      	blt.n	8001068 <_malloc_r+0x1c>
 8001064:	42a9      	cmp	r1, r5
 8001066:	d904      	bls.n	8001072 <_malloc_r+0x26>
 8001068:	230c      	movs	r3, #12
 800106a:	6033      	str	r3, [r6, #0]
 800106c:	2000      	movs	r0, #0
 800106e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001148 <_malloc_r+0xfc>
 8001076:	f000 f869 	bl	800114c <__malloc_lock>
 800107a:	f8d8 3000 	ldr.w	r3, [r8]
 800107e:	461c      	mov	r4, r3
 8001080:	bb44      	cbnz	r4, 80010d4 <_malloc_r+0x88>
 8001082:	4629      	mov	r1, r5
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff ffbf 	bl	8001008 <sbrk_aligned>
 800108a:	1c43      	adds	r3, r0, #1
 800108c:	4604      	mov	r4, r0
 800108e:	d158      	bne.n	8001142 <_malloc_r+0xf6>
 8001090:	f8d8 4000 	ldr.w	r4, [r8]
 8001094:	4627      	mov	r7, r4
 8001096:	2f00      	cmp	r7, #0
 8001098:	d143      	bne.n	8001122 <_malloc_r+0xd6>
 800109a:	2c00      	cmp	r4, #0
 800109c:	d04b      	beq.n	8001136 <_malloc_r+0xea>
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	4639      	mov	r1, r7
 80010a2:	4630      	mov	r0, r6
 80010a4:	eb04 0903 	add.w	r9, r4, r3
 80010a8:	f000 fc90 	bl	80019cc <_sbrk_r>
 80010ac:	4581      	cmp	r9, r0
 80010ae:	d142      	bne.n	8001136 <_malloc_r+0xea>
 80010b0:	6821      	ldr	r1, [r4, #0]
 80010b2:	1a6d      	subs	r5, r5, r1
 80010b4:	4629      	mov	r1, r5
 80010b6:	4630      	mov	r0, r6
 80010b8:	f7ff ffa6 	bl	8001008 <sbrk_aligned>
 80010bc:	3001      	adds	r0, #1
 80010be:	d03a      	beq.n	8001136 <_malloc_r+0xea>
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	442b      	add	r3, r5
 80010c4:	6023      	str	r3, [r4, #0]
 80010c6:	f8d8 3000 	ldr.w	r3, [r8]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	bb62      	cbnz	r2, 8001128 <_malloc_r+0xdc>
 80010ce:	f8c8 7000 	str.w	r7, [r8]
 80010d2:	e00f      	b.n	80010f4 <_malloc_r+0xa8>
 80010d4:	6822      	ldr	r2, [r4, #0]
 80010d6:	1b52      	subs	r2, r2, r5
 80010d8:	d420      	bmi.n	800111c <_malloc_r+0xd0>
 80010da:	2a0b      	cmp	r2, #11
 80010dc:	d917      	bls.n	800110e <_malloc_r+0xc2>
 80010de:	1961      	adds	r1, r4, r5
 80010e0:	42a3      	cmp	r3, r4
 80010e2:	6025      	str	r5, [r4, #0]
 80010e4:	bf18      	it	ne
 80010e6:	6059      	strne	r1, [r3, #4]
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	bf08      	it	eq
 80010ec:	f8c8 1000 	streq.w	r1, [r8]
 80010f0:	5162      	str	r2, [r4, r5]
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	4630      	mov	r0, r6
 80010f6:	f000 f82f 	bl	8001158 <__malloc_unlock>
 80010fa:	f104 000b 	add.w	r0, r4, #11
 80010fe:	1d23      	adds	r3, r4, #4
 8001100:	f020 0007 	bic.w	r0, r0, #7
 8001104:	1ac2      	subs	r2, r0, r3
 8001106:	bf1c      	itt	ne
 8001108:	1a1b      	subne	r3, r3, r0
 800110a:	50a3      	strne	r3, [r4, r2]
 800110c:	e7af      	b.n	800106e <_malloc_r+0x22>
 800110e:	6862      	ldr	r2, [r4, #4]
 8001110:	42a3      	cmp	r3, r4
 8001112:	bf0c      	ite	eq
 8001114:	f8c8 2000 	streq.w	r2, [r8]
 8001118:	605a      	strne	r2, [r3, #4]
 800111a:	e7eb      	b.n	80010f4 <_malloc_r+0xa8>
 800111c:	4623      	mov	r3, r4
 800111e:	6864      	ldr	r4, [r4, #4]
 8001120:	e7ae      	b.n	8001080 <_malloc_r+0x34>
 8001122:	463c      	mov	r4, r7
 8001124:	687f      	ldr	r7, [r7, #4]
 8001126:	e7b6      	b.n	8001096 <_malloc_r+0x4a>
 8001128:	461a      	mov	r2, r3
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	42a3      	cmp	r3, r4
 800112e:	d1fb      	bne.n	8001128 <_malloc_r+0xdc>
 8001130:	2300      	movs	r3, #0
 8001132:	6053      	str	r3, [r2, #4]
 8001134:	e7de      	b.n	80010f4 <_malloc_r+0xa8>
 8001136:	230c      	movs	r3, #12
 8001138:	6033      	str	r3, [r6, #0]
 800113a:	4630      	mov	r0, r6
 800113c:	f000 f80c 	bl	8001158 <__malloc_unlock>
 8001140:	e794      	b.n	800106c <_malloc_r+0x20>
 8001142:	6005      	str	r5, [r0, #0]
 8001144:	e7d6      	b.n	80010f4 <_malloc_r+0xa8>
 8001146:	bf00      	nop
 8001148:	200001c4 	.word	0x200001c4

0800114c <__malloc_lock>:
 800114c:	4801      	ldr	r0, [pc, #4]	@ (8001154 <__malloc_lock+0x8>)
 800114e:	f7ff bf0e 	b.w	8000f6e <__retarget_lock_acquire_recursive>
 8001152:	bf00      	nop
 8001154:	200001bc 	.word	0x200001bc

08001158 <__malloc_unlock>:
 8001158:	4801      	ldr	r0, [pc, #4]	@ (8001160 <__malloc_unlock+0x8>)
 800115a:	f7ff bf09 	b.w	8000f70 <__retarget_lock_release_recursive>
 800115e:	bf00      	nop
 8001160:	200001bc 	.word	0x200001bc

08001164 <__sfputc_r>:
 8001164:	6893      	ldr	r3, [r2, #8]
 8001166:	3b01      	subs	r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	b410      	push	{r4}
 800116c:	6093      	str	r3, [r2, #8]
 800116e:	da08      	bge.n	8001182 <__sfputc_r+0x1e>
 8001170:	6994      	ldr	r4, [r2, #24]
 8001172:	42a3      	cmp	r3, r4
 8001174:	db01      	blt.n	800117a <__sfputc_r+0x16>
 8001176:	290a      	cmp	r1, #10
 8001178:	d103      	bne.n	8001182 <__sfputc_r+0x1e>
 800117a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800117e:	f7ff bde8 	b.w	8000d52 <__swbuf_r>
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	1c58      	adds	r0, r3, #1
 8001186:	6010      	str	r0, [r2, #0]
 8001188:	7019      	strb	r1, [r3, #0]
 800118a:	4608      	mov	r0, r1
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001190:	4770      	bx	lr

08001192 <__sfputs_r>:
 8001192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001194:	4606      	mov	r6, r0
 8001196:	460f      	mov	r7, r1
 8001198:	4614      	mov	r4, r2
 800119a:	18d5      	adds	r5, r2, r3
 800119c:	42ac      	cmp	r4, r5
 800119e:	d101      	bne.n	80011a4 <__sfputs_r+0x12>
 80011a0:	2000      	movs	r0, #0
 80011a2:	e007      	b.n	80011b4 <__sfputs_r+0x22>
 80011a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011a8:	463a      	mov	r2, r7
 80011aa:	4630      	mov	r0, r6
 80011ac:	f7ff ffda 	bl	8001164 <__sfputc_r>
 80011b0:	1c43      	adds	r3, r0, #1
 80011b2:	d1f3      	bne.n	800119c <__sfputs_r+0xa>
 80011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080011b8 <_vfiprintf_r>:
 80011b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011bc:	460d      	mov	r5, r1
 80011be:	b09d      	sub	sp, #116	@ 0x74
 80011c0:	4614      	mov	r4, r2
 80011c2:	4698      	mov	r8, r3
 80011c4:	4606      	mov	r6, r0
 80011c6:	b118      	cbz	r0, 80011d0 <_vfiprintf_r+0x18>
 80011c8:	6a03      	ldr	r3, [r0, #32]
 80011ca:	b90b      	cbnz	r3, 80011d0 <_vfiprintf_r+0x18>
 80011cc:	f7ff fcd0 	bl	8000b70 <__sinit>
 80011d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011d2:	07d9      	lsls	r1, r3, #31
 80011d4:	d405      	bmi.n	80011e2 <_vfiprintf_r+0x2a>
 80011d6:	89ab      	ldrh	r3, [r5, #12]
 80011d8:	059a      	lsls	r2, r3, #22
 80011da:	d402      	bmi.n	80011e2 <_vfiprintf_r+0x2a>
 80011dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011de:	f7ff fec6 	bl	8000f6e <__retarget_lock_acquire_recursive>
 80011e2:	89ab      	ldrh	r3, [r5, #12]
 80011e4:	071b      	lsls	r3, r3, #28
 80011e6:	d501      	bpl.n	80011ec <_vfiprintf_r+0x34>
 80011e8:	692b      	ldr	r3, [r5, #16]
 80011ea:	b99b      	cbnz	r3, 8001214 <_vfiprintf_r+0x5c>
 80011ec:	4629      	mov	r1, r5
 80011ee:	4630      	mov	r0, r6
 80011f0:	f7ff fdee 	bl	8000dd0 <__swsetup_r>
 80011f4:	b170      	cbz	r0, 8001214 <_vfiprintf_r+0x5c>
 80011f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011f8:	07dc      	lsls	r4, r3, #31
 80011fa:	d504      	bpl.n	8001206 <_vfiprintf_r+0x4e>
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	b01d      	add	sp, #116	@ 0x74
 8001202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001206:	89ab      	ldrh	r3, [r5, #12]
 8001208:	0598      	lsls	r0, r3, #22
 800120a:	d4f7      	bmi.n	80011fc <_vfiprintf_r+0x44>
 800120c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800120e:	f7ff feaf 	bl	8000f70 <__retarget_lock_release_recursive>
 8001212:	e7f3      	b.n	80011fc <_vfiprintf_r+0x44>
 8001214:	2300      	movs	r3, #0
 8001216:	9309      	str	r3, [sp, #36]	@ 0x24
 8001218:	2320      	movs	r3, #32
 800121a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800121e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001222:	2330      	movs	r3, #48	@ 0x30
 8001224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80013d4 <_vfiprintf_r+0x21c>
 8001228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800122c:	f04f 0901 	mov.w	r9, #1
 8001230:	4623      	mov	r3, r4
 8001232:	469a      	mov	sl, r3
 8001234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001238:	b10a      	cbz	r2, 800123e <_vfiprintf_r+0x86>
 800123a:	2a25      	cmp	r2, #37	@ 0x25
 800123c:	d1f9      	bne.n	8001232 <_vfiprintf_r+0x7a>
 800123e:	ebba 0b04 	subs.w	fp, sl, r4
 8001242:	d00b      	beq.n	800125c <_vfiprintf_r+0xa4>
 8001244:	465b      	mov	r3, fp
 8001246:	4622      	mov	r2, r4
 8001248:	4629      	mov	r1, r5
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff ffa1 	bl	8001192 <__sfputs_r>
 8001250:	3001      	adds	r0, #1
 8001252:	f000 80a7 	beq.w	80013a4 <_vfiprintf_r+0x1ec>
 8001256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001258:	445a      	add	r2, fp
 800125a:	9209      	str	r2, [sp, #36]	@ 0x24
 800125c:	f89a 3000 	ldrb.w	r3, [sl]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 809f 	beq.w	80013a4 <_vfiprintf_r+0x1ec>
 8001266:	2300      	movs	r3, #0
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001270:	f10a 0a01 	add.w	sl, sl, #1
 8001274:	9304      	str	r3, [sp, #16]
 8001276:	9307      	str	r3, [sp, #28]
 8001278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800127c:	931a      	str	r3, [sp, #104]	@ 0x68
 800127e:	4654      	mov	r4, sl
 8001280:	2205      	movs	r2, #5
 8001282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001286:	4853      	ldr	r0, [pc, #332]	@ (80013d4 <_vfiprintf_r+0x21c>)
 8001288:	f7fe ffaa 	bl	80001e0 <memchr>
 800128c:	9a04      	ldr	r2, [sp, #16]
 800128e:	b9d8      	cbnz	r0, 80012c8 <_vfiprintf_r+0x110>
 8001290:	06d1      	lsls	r1, r2, #27
 8001292:	bf44      	itt	mi
 8001294:	2320      	movmi	r3, #32
 8001296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800129a:	0713      	lsls	r3, r2, #28
 800129c:	bf44      	itt	mi
 800129e:	232b      	movmi	r3, #43	@ 0x2b
 80012a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80012a4:	f89a 3000 	ldrb.w	r3, [sl]
 80012a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80012aa:	d015      	beq.n	80012d8 <_vfiprintf_r+0x120>
 80012ac:	9a07      	ldr	r2, [sp, #28]
 80012ae:	4654      	mov	r4, sl
 80012b0:	2000      	movs	r0, #0
 80012b2:	f04f 0c0a 	mov.w	ip, #10
 80012b6:	4621      	mov	r1, r4
 80012b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012bc:	3b30      	subs	r3, #48	@ 0x30
 80012be:	2b09      	cmp	r3, #9
 80012c0:	d94b      	bls.n	800135a <_vfiprintf_r+0x1a2>
 80012c2:	b1b0      	cbz	r0, 80012f2 <_vfiprintf_r+0x13a>
 80012c4:	9207      	str	r2, [sp, #28]
 80012c6:	e014      	b.n	80012f2 <_vfiprintf_r+0x13a>
 80012c8:	eba0 0308 	sub.w	r3, r0, r8
 80012cc:	fa09 f303 	lsl.w	r3, r9, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	9304      	str	r3, [sp, #16]
 80012d4:	46a2      	mov	sl, r4
 80012d6:	e7d2      	b.n	800127e <_vfiprintf_r+0xc6>
 80012d8:	9b03      	ldr	r3, [sp, #12]
 80012da:	1d19      	adds	r1, r3, #4
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	9103      	str	r1, [sp, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bfbb      	ittet	lt
 80012e4:	425b      	neglt	r3, r3
 80012e6:	f042 0202 	orrlt.w	r2, r2, #2
 80012ea:	9307      	strge	r3, [sp, #28]
 80012ec:	9307      	strlt	r3, [sp, #28]
 80012ee:	bfb8      	it	lt
 80012f0:	9204      	strlt	r2, [sp, #16]
 80012f2:	7823      	ldrb	r3, [r4, #0]
 80012f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80012f6:	d10a      	bne.n	800130e <_vfiprintf_r+0x156>
 80012f8:	7863      	ldrb	r3, [r4, #1]
 80012fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80012fc:	d132      	bne.n	8001364 <_vfiprintf_r+0x1ac>
 80012fe:	9b03      	ldr	r3, [sp, #12]
 8001300:	1d1a      	adds	r2, r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	9203      	str	r2, [sp, #12]
 8001306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800130a:	3402      	adds	r4, #2
 800130c:	9305      	str	r3, [sp, #20]
 800130e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80013e4 <_vfiprintf_r+0x22c>
 8001312:	7821      	ldrb	r1, [r4, #0]
 8001314:	2203      	movs	r2, #3
 8001316:	4650      	mov	r0, sl
 8001318:	f7fe ff62 	bl	80001e0 <memchr>
 800131c:	b138      	cbz	r0, 800132e <_vfiprintf_r+0x176>
 800131e:	9b04      	ldr	r3, [sp, #16]
 8001320:	eba0 000a 	sub.w	r0, r0, sl
 8001324:	2240      	movs	r2, #64	@ 0x40
 8001326:	4082      	lsls	r2, r0
 8001328:	4313      	orrs	r3, r2
 800132a:	3401      	adds	r4, #1
 800132c:	9304      	str	r3, [sp, #16]
 800132e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001332:	4829      	ldr	r0, [pc, #164]	@ (80013d8 <_vfiprintf_r+0x220>)
 8001334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001338:	2206      	movs	r2, #6
 800133a:	f7fe ff51 	bl	80001e0 <memchr>
 800133e:	2800      	cmp	r0, #0
 8001340:	d03f      	beq.n	80013c2 <_vfiprintf_r+0x20a>
 8001342:	4b26      	ldr	r3, [pc, #152]	@ (80013dc <_vfiprintf_r+0x224>)
 8001344:	bb1b      	cbnz	r3, 800138e <_vfiprintf_r+0x1d6>
 8001346:	9b03      	ldr	r3, [sp, #12]
 8001348:	3307      	adds	r3, #7
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	3308      	adds	r3, #8
 8001350:	9303      	str	r3, [sp, #12]
 8001352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001354:	443b      	add	r3, r7
 8001356:	9309      	str	r3, [sp, #36]	@ 0x24
 8001358:	e76a      	b.n	8001230 <_vfiprintf_r+0x78>
 800135a:	fb0c 3202 	mla	r2, ip, r2, r3
 800135e:	460c      	mov	r4, r1
 8001360:	2001      	movs	r0, #1
 8001362:	e7a8      	b.n	80012b6 <_vfiprintf_r+0xfe>
 8001364:	2300      	movs	r3, #0
 8001366:	3401      	adds	r4, #1
 8001368:	9305      	str	r3, [sp, #20]
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 0c0a 	mov.w	ip, #10
 8001370:	4620      	mov	r0, r4
 8001372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001376:	3a30      	subs	r2, #48	@ 0x30
 8001378:	2a09      	cmp	r2, #9
 800137a:	d903      	bls.n	8001384 <_vfiprintf_r+0x1cc>
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0c6      	beq.n	800130e <_vfiprintf_r+0x156>
 8001380:	9105      	str	r1, [sp, #20]
 8001382:	e7c4      	b.n	800130e <_vfiprintf_r+0x156>
 8001384:	fb0c 2101 	mla	r1, ip, r1, r2
 8001388:	4604      	mov	r4, r0
 800138a:	2301      	movs	r3, #1
 800138c:	e7f0      	b.n	8001370 <_vfiprintf_r+0x1b8>
 800138e:	ab03      	add	r3, sp, #12
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	462a      	mov	r2, r5
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <_vfiprintf_r+0x228>)
 8001396:	a904      	add	r1, sp, #16
 8001398:	4630      	mov	r0, r6
 800139a:	f3af 8000 	nop.w
 800139e:	4607      	mov	r7, r0
 80013a0:	1c78      	adds	r0, r7, #1
 80013a2:	d1d6      	bne.n	8001352 <_vfiprintf_r+0x19a>
 80013a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80013a6:	07d9      	lsls	r1, r3, #31
 80013a8:	d405      	bmi.n	80013b6 <_vfiprintf_r+0x1fe>
 80013aa:	89ab      	ldrh	r3, [r5, #12]
 80013ac:	059a      	lsls	r2, r3, #22
 80013ae:	d402      	bmi.n	80013b6 <_vfiprintf_r+0x1fe>
 80013b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80013b2:	f7ff fddd 	bl	8000f70 <__retarget_lock_release_recursive>
 80013b6:	89ab      	ldrh	r3, [r5, #12]
 80013b8:	065b      	lsls	r3, r3, #25
 80013ba:	f53f af1f 	bmi.w	80011fc <_vfiprintf_r+0x44>
 80013be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80013c0:	e71e      	b.n	8001200 <_vfiprintf_r+0x48>
 80013c2:	ab03      	add	r3, sp, #12
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	462a      	mov	r2, r5
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <_vfiprintf_r+0x228>)
 80013ca:	a904      	add	r1, sp, #16
 80013cc:	4630      	mov	r0, r6
 80013ce:	f000 f879 	bl	80014c4 <_printf_i>
 80013d2:	e7e4      	b.n	800139e <_vfiprintf_r+0x1e6>
 80013d4:	08001ab2 	.word	0x08001ab2
 80013d8:	08001abc 	.word	0x08001abc
 80013dc:	00000000 	.word	0x00000000
 80013e0:	08001193 	.word	0x08001193
 80013e4:	08001ab8 	.word	0x08001ab8

080013e8 <_printf_common>:
 80013e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013ec:	4616      	mov	r6, r2
 80013ee:	4698      	mov	r8, r3
 80013f0:	688a      	ldr	r2, [r1, #8]
 80013f2:	690b      	ldr	r3, [r1, #16]
 80013f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	bfb8      	it	lt
 80013fc:	4613      	movlt	r3, r2
 80013fe:	6033      	str	r3, [r6, #0]
 8001400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001404:	4607      	mov	r7, r0
 8001406:	460c      	mov	r4, r1
 8001408:	b10a      	cbz	r2, 800140e <_printf_common+0x26>
 800140a:	3301      	adds	r3, #1
 800140c:	6033      	str	r3, [r6, #0]
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	0699      	lsls	r1, r3, #26
 8001412:	bf42      	ittt	mi
 8001414:	6833      	ldrmi	r3, [r6, #0]
 8001416:	3302      	addmi	r3, #2
 8001418:	6033      	strmi	r3, [r6, #0]
 800141a:	6825      	ldr	r5, [r4, #0]
 800141c:	f015 0506 	ands.w	r5, r5, #6
 8001420:	d106      	bne.n	8001430 <_printf_common+0x48>
 8001422:	f104 0a19 	add.w	sl, r4, #25
 8001426:	68e3      	ldr	r3, [r4, #12]
 8001428:	6832      	ldr	r2, [r6, #0]
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	42ab      	cmp	r3, r5
 800142e:	dc26      	bgt.n	800147e <_printf_common+0x96>
 8001430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	3b00      	subs	r3, #0
 8001438:	bf18      	it	ne
 800143a:	2301      	movne	r3, #1
 800143c:	0692      	lsls	r2, r2, #26
 800143e:	d42b      	bmi.n	8001498 <_printf_common+0xb0>
 8001440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001444:	4641      	mov	r1, r8
 8001446:	4638      	mov	r0, r7
 8001448:	47c8      	blx	r9
 800144a:	3001      	adds	r0, #1
 800144c:	d01e      	beq.n	800148c <_printf_common+0xa4>
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	6922      	ldr	r2, [r4, #16]
 8001452:	f003 0306 	and.w	r3, r3, #6
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf02      	ittt	eq
 800145a:	68e5      	ldreq	r5, [r4, #12]
 800145c:	6833      	ldreq	r3, [r6, #0]
 800145e:	1aed      	subeq	r5, r5, r3
 8001460:	68a3      	ldr	r3, [r4, #8]
 8001462:	bf0c      	ite	eq
 8001464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001468:	2500      	movne	r5, #0
 800146a:	4293      	cmp	r3, r2
 800146c:	bfc4      	itt	gt
 800146e:	1a9b      	subgt	r3, r3, r2
 8001470:	18ed      	addgt	r5, r5, r3
 8001472:	2600      	movs	r6, #0
 8001474:	341a      	adds	r4, #26
 8001476:	42b5      	cmp	r5, r6
 8001478:	d11a      	bne.n	80014b0 <_printf_common+0xc8>
 800147a:	2000      	movs	r0, #0
 800147c:	e008      	b.n	8001490 <_printf_common+0xa8>
 800147e:	2301      	movs	r3, #1
 8001480:	4652      	mov	r2, sl
 8001482:	4641      	mov	r1, r8
 8001484:	4638      	mov	r0, r7
 8001486:	47c8      	blx	r9
 8001488:	3001      	adds	r0, #1
 800148a:	d103      	bne.n	8001494 <_printf_common+0xac>
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001494:	3501      	adds	r5, #1
 8001496:	e7c6      	b.n	8001426 <_printf_common+0x3e>
 8001498:	18e1      	adds	r1, r4, r3
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	2030      	movs	r0, #48	@ 0x30
 800149e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80014a2:	4422      	add	r2, r4
 80014a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80014a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80014ac:	3302      	adds	r3, #2
 80014ae:	e7c7      	b.n	8001440 <_printf_common+0x58>
 80014b0:	2301      	movs	r3, #1
 80014b2:	4622      	mov	r2, r4
 80014b4:	4641      	mov	r1, r8
 80014b6:	4638      	mov	r0, r7
 80014b8:	47c8      	blx	r9
 80014ba:	3001      	adds	r0, #1
 80014bc:	d0e6      	beq.n	800148c <_printf_common+0xa4>
 80014be:	3601      	adds	r6, #1
 80014c0:	e7d9      	b.n	8001476 <_printf_common+0x8e>
	...

080014c4 <_printf_i>:
 80014c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014c8:	7e0f      	ldrb	r7, [r1, #24]
 80014ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80014cc:	2f78      	cmp	r7, #120	@ 0x78
 80014ce:	4691      	mov	r9, r2
 80014d0:	4680      	mov	r8, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	469a      	mov	sl, r3
 80014d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80014da:	d807      	bhi.n	80014ec <_printf_i+0x28>
 80014dc:	2f62      	cmp	r7, #98	@ 0x62
 80014de:	d80a      	bhi.n	80014f6 <_printf_i+0x32>
 80014e0:	2f00      	cmp	r7, #0
 80014e2:	f000 80d2 	beq.w	800168a <_printf_i+0x1c6>
 80014e6:	2f58      	cmp	r7, #88	@ 0x58
 80014e8:	f000 80b9 	beq.w	800165e <_printf_i+0x19a>
 80014ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80014f4:	e03a      	b.n	800156c <_printf_i+0xa8>
 80014f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80014fa:	2b15      	cmp	r3, #21
 80014fc:	d8f6      	bhi.n	80014ec <_printf_i+0x28>
 80014fe:	a101      	add	r1, pc, #4	@ (adr r1, 8001504 <_printf_i+0x40>)
 8001500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001504:	0800155d 	.word	0x0800155d
 8001508:	08001571 	.word	0x08001571
 800150c:	080014ed 	.word	0x080014ed
 8001510:	080014ed 	.word	0x080014ed
 8001514:	080014ed 	.word	0x080014ed
 8001518:	080014ed 	.word	0x080014ed
 800151c:	08001571 	.word	0x08001571
 8001520:	080014ed 	.word	0x080014ed
 8001524:	080014ed 	.word	0x080014ed
 8001528:	080014ed 	.word	0x080014ed
 800152c:	080014ed 	.word	0x080014ed
 8001530:	08001671 	.word	0x08001671
 8001534:	0800159b 	.word	0x0800159b
 8001538:	0800162b 	.word	0x0800162b
 800153c:	080014ed 	.word	0x080014ed
 8001540:	080014ed 	.word	0x080014ed
 8001544:	08001693 	.word	0x08001693
 8001548:	080014ed 	.word	0x080014ed
 800154c:	0800159b 	.word	0x0800159b
 8001550:	080014ed 	.word	0x080014ed
 8001554:	080014ed 	.word	0x080014ed
 8001558:	08001633 	.word	0x08001633
 800155c:	6833      	ldr	r3, [r6, #0]
 800155e:	1d1a      	adds	r2, r3, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6032      	str	r2, [r6, #0]
 8001564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800156c:	2301      	movs	r3, #1
 800156e:	e09d      	b.n	80016ac <_printf_i+0x1e8>
 8001570:	6833      	ldr	r3, [r6, #0]
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	1d19      	adds	r1, r3, #4
 8001576:	6031      	str	r1, [r6, #0]
 8001578:	0606      	lsls	r6, r0, #24
 800157a:	d501      	bpl.n	8001580 <_printf_i+0xbc>
 800157c:	681d      	ldr	r5, [r3, #0]
 800157e:	e003      	b.n	8001588 <_printf_i+0xc4>
 8001580:	0645      	lsls	r5, r0, #25
 8001582:	d5fb      	bpl.n	800157c <_printf_i+0xb8>
 8001584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001588:	2d00      	cmp	r5, #0
 800158a:	da03      	bge.n	8001594 <_printf_i+0xd0>
 800158c:	232d      	movs	r3, #45	@ 0x2d
 800158e:	426d      	negs	r5, r5
 8001590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001594:	4859      	ldr	r0, [pc, #356]	@ (80016fc <_printf_i+0x238>)
 8001596:	230a      	movs	r3, #10
 8001598:	e011      	b.n	80015be <_printf_i+0xfa>
 800159a:	6821      	ldr	r1, [r4, #0]
 800159c:	6833      	ldr	r3, [r6, #0]
 800159e:	0608      	lsls	r0, r1, #24
 80015a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80015a4:	d402      	bmi.n	80015ac <_printf_i+0xe8>
 80015a6:	0649      	lsls	r1, r1, #25
 80015a8:	bf48      	it	mi
 80015aa:	b2ad      	uxthmi	r5, r5
 80015ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80015ae:	4853      	ldr	r0, [pc, #332]	@ (80016fc <_printf_i+0x238>)
 80015b0:	6033      	str	r3, [r6, #0]
 80015b2:	bf14      	ite	ne
 80015b4:	230a      	movne	r3, #10
 80015b6:	2308      	moveq	r3, #8
 80015b8:	2100      	movs	r1, #0
 80015ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80015be:	6866      	ldr	r6, [r4, #4]
 80015c0:	60a6      	str	r6, [r4, #8]
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	bfa2      	ittt	ge
 80015c6:	6821      	ldrge	r1, [r4, #0]
 80015c8:	f021 0104 	bicge.w	r1, r1, #4
 80015cc:	6021      	strge	r1, [r4, #0]
 80015ce:	b90d      	cbnz	r5, 80015d4 <_printf_i+0x110>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d04b      	beq.n	800166c <_printf_i+0x1a8>
 80015d4:	4616      	mov	r6, r2
 80015d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80015da:	fb03 5711 	mls	r7, r3, r1, r5
 80015de:	5dc7      	ldrb	r7, [r0, r7]
 80015e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015e4:	462f      	mov	r7, r5
 80015e6:	42bb      	cmp	r3, r7
 80015e8:	460d      	mov	r5, r1
 80015ea:	d9f4      	bls.n	80015d6 <_printf_i+0x112>
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d10b      	bne.n	8001608 <_printf_i+0x144>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	07df      	lsls	r7, r3, #31
 80015f4:	d508      	bpl.n	8001608 <_printf_i+0x144>
 80015f6:	6923      	ldr	r3, [r4, #16]
 80015f8:	6861      	ldr	r1, [r4, #4]
 80015fa:	4299      	cmp	r1, r3
 80015fc:	bfde      	ittt	le
 80015fe:	2330      	movle	r3, #48	@ 0x30
 8001600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001608:	1b92      	subs	r2, r2, r6
 800160a:	6122      	str	r2, [r4, #16]
 800160c:	f8cd a000 	str.w	sl, [sp]
 8001610:	464b      	mov	r3, r9
 8001612:	aa03      	add	r2, sp, #12
 8001614:	4621      	mov	r1, r4
 8001616:	4640      	mov	r0, r8
 8001618:	f7ff fee6 	bl	80013e8 <_printf_common>
 800161c:	3001      	adds	r0, #1
 800161e:	d14a      	bne.n	80016b6 <_printf_i+0x1f2>
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	b004      	add	sp, #16
 8001626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800162a:	6823      	ldr	r3, [r4, #0]
 800162c:	f043 0320 	orr.w	r3, r3, #32
 8001630:	6023      	str	r3, [r4, #0]
 8001632:	4833      	ldr	r0, [pc, #204]	@ (8001700 <_printf_i+0x23c>)
 8001634:	2778      	movs	r7, #120	@ 0x78
 8001636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	6831      	ldr	r1, [r6, #0]
 800163e:	061f      	lsls	r7, r3, #24
 8001640:	f851 5b04 	ldr.w	r5, [r1], #4
 8001644:	d402      	bmi.n	800164c <_printf_i+0x188>
 8001646:	065f      	lsls	r7, r3, #25
 8001648:	bf48      	it	mi
 800164a:	b2ad      	uxthmi	r5, r5
 800164c:	6031      	str	r1, [r6, #0]
 800164e:	07d9      	lsls	r1, r3, #31
 8001650:	bf44      	itt	mi
 8001652:	f043 0320 	orrmi.w	r3, r3, #32
 8001656:	6023      	strmi	r3, [r4, #0]
 8001658:	b11d      	cbz	r5, 8001662 <_printf_i+0x19e>
 800165a:	2310      	movs	r3, #16
 800165c:	e7ac      	b.n	80015b8 <_printf_i+0xf4>
 800165e:	4827      	ldr	r0, [pc, #156]	@ (80016fc <_printf_i+0x238>)
 8001660:	e7e9      	b.n	8001636 <_printf_i+0x172>
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f023 0320 	bic.w	r3, r3, #32
 8001668:	6023      	str	r3, [r4, #0]
 800166a:	e7f6      	b.n	800165a <_printf_i+0x196>
 800166c:	4616      	mov	r6, r2
 800166e:	e7bd      	b.n	80015ec <_printf_i+0x128>
 8001670:	6833      	ldr	r3, [r6, #0]
 8001672:	6825      	ldr	r5, [r4, #0]
 8001674:	6961      	ldr	r1, [r4, #20]
 8001676:	1d18      	adds	r0, r3, #4
 8001678:	6030      	str	r0, [r6, #0]
 800167a:	062e      	lsls	r6, r5, #24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	d501      	bpl.n	8001684 <_printf_i+0x1c0>
 8001680:	6019      	str	r1, [r3, #0]
 8001682:	e002      	b.n	800168a <_printf_i+0x1c6>
 8001684:	0668      	lsls	r0, r5, #25
 8001686:	d5fb      	bpl.n	8001680 <_printf_i+0x1bc>
 8001688:	8019      	strh	r1, [r3, #0]
 800168a:	2300      	movs	r3, #0
 800168c:	6123      	str	r3, [r4, #16]
 800168e:	4616      	mov	r6, r2
 8001690:	e7bc      	b.n	800160c <_printf_i+0x148>
 8001692:	6833      	ldr	r3, [r6, #0]
 8001694:	1d1a      	adds	r2, r3, #4
 8001696:	6032      	str	r2, [r6, #0]
 8001698:	681e      	ldr	r6, [r3, #0]
 800169a:	6862      	ldr	r2, [r4, #4]
 800169c:	2100      	movs	r1, #0
 800169e:	4630      	mov	r0, r6
 80016a0:	f7fe fd9e 	bl	80001e0 <memchr>
 80016a4:	b108      	cbz	r0, 80016aa <_printf_i+0x1e6>
 80016a6:	1b80      	subs	r0, r0, r6
 80016a8:	6060      	str	r0, [r4, #4]
 80016aa:	6863      	ldr	r3, [r4, #4]
 80016ac:	6123      	str	r3, [r4, #16]
 80016ae:	2300      	movs	r3, #0
 80016b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016b4:	e7aa      	b.n	800160c <_printf_i+0x148>
 80016b6:	6923      	ldr	r3, [r4, #16]
 80016b8:	4632      	mov	r2, r6
 80016ba:	4649      	mov	r1, r9
 80016bc:	4640      	mov	r0, r8
 80016be:	47d0      	blx	sl
 80016c0:	3001      	adds	r0, #1
 80016c2:	d0ad      	beq.n	8001620 <_printf_i+0x15c>
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	079b      	lsls	r3, r3, #30
 80016c8:	d413      	bmi.n	80016f2 <_printf_i+0x22e>
 80016ca:	68e0      	ldr	r0, [r4, #12]
 80016cc:	9b03      	ldr	r3, [sp, #12]
 80016ce:	4298      	cmp	r0, r3
 80016d0:	bfb8      	it	lt
 80016d2:	4618      	movlt	r0, r3
 80016d4:	e7a6      	b.n	8001624 <_printf_i+0x160>
 80016d6:	2301      	movs	r3, #1
 80016d8:	4632      	mov	r2, r6
 80016da:	4649      	mov	r1, r9
 80016dc:	4640      	mov	r0, r8
 80016de:	47d0      	blx	sl
 80016e0:	3001      	adds	r0, #1
 80016e2:	d09d      	beq.n	8001620 <_printf_i+0x15c>
 80016e4:	3501      	adds	r5, #1
 80016e6:	68e3      	ldr	r3, [r4, #12]
 80016e8:	9903      	ldr	r1, [sp, #12]
 80016ea:	1a5b      	subs	r3, r3, r1
 80016ec:	42ab      	cmp	r3, r5
 80016ee:	dcf2      	bgt.n	80016d6 <_printf_i+0x212>
 80016f0:	e7eb      	b.n	80016ca <_printf_i+0x206>
 80016f2:	2500      	movs	r5, #0
 80016f4:	f104 0619 	add.w	r6, r4, #25
 80016f8:	e7f5      	b.n	80016e6 <_printf_i+0x222>
 80016fa:	bf00      	nop
 80016fc:	08001ac3 	.word	0x08001ac3
 8001700:	08001ad4 	.word	0x08001ad4

08001704 <__sflush_r>:
 8001704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800170c:	0716      	lsls	r6, r2, #28
 800170e:	4605      	mov	r5, r0
 8001710:	460c      	mov	r4, r1
 8001712:	d454      	bmi.n	80017be <__sflush_r+0xba>
 8001714:	684b      	ldr	r3, [r1, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	dc02      	bgt.n	8001720 <__sflush_r+0x1c>
 800171a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	dd48      	ble.n	80017b2 <__sflush_r+0xae>
 8001720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001722:	2e00      	cmp	r6, #0
 8001724:	d045      	beq.n	80017b2 <__sflush_r+0xae>
 8001726:	2300      	movs	r3, #0
 8001728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800172c:	682f      	ldr	r7, [r5, #0]
 800172e:	6a21      	ldr	r1, [r4, #32]
 8001730:	602b      	str	r3, [r5, #0]
 8001732:	d030      	beq.n	8001796 <__sflush_r+0x92>
 8001734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	0759      	lsls	r1, r3, #29
 800173a:	d505      	bpl.n	8001748 <__sflush_r+0x44>
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	1ad2      	subs	r2, r2, r3
 8001740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001742:	b10b      	cbz	r3, 8001748 <__sflush_r+0x44>
 8001744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800174c:	6a21      	ldr	r1, [r4, #32]
 800174e:	4628      	mov	r0, r5
 8001750:	47b0      	blx	r6
 8001752:	1c43      	adds	r3, r0, #1
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	d106      	bne.n	8001766 <__sflush_r+0x62>
 8001758:	6829      	ldr	r1, [r5, #0]
 800175a:	291d      	cmp	r1, #29
 800175c:	d82b      	bhi.n	80017b6 <__sflush_r+0xb2>
 800175e:	4a2a      	ldr	r2, [pc, #168]	@ (8001808 <__sflush_r+0x104>)
 8001760:	410a      	asrs	r2, r1
 8001762:	07d6      	lsls	r6, r2, #31
 8001764:	d427      	bmi.n	80017b6 <__sflush_r+0xb2>
 8001766:	2200      	movs	r2, #0
 8001768:	6062      	str	r2, [r4, #4]
 800176a:	04d9      	lsls	r1, r3, #19
 800176c:	6922      	ldr	r2, [r4, #16]
 800176e:	6022      	str	r2, [r4, #0]
 8001770:	d504      	bpl.n	800177c <__sflush_r+0x78>
 8001772:	1c42      	adds	r2, r0, #1
 8001774:	d101      	bne.n	800177a <__sflush_r+0x76>
 8001776:	682b      	ldr	r3, [r5, #0]
 8001778:	b903      	cbnz	r3, 800177c <__sflush_r+0x78>
 800177a:	6560      	str	r0, [r4, #84]	@ 0x54
 800177c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800177e:	602f      	str	r7, [r5, #0]
 8001780:	b1b9      	cbz	r1, 80017b2 <__sflush_r+0xae>
 8001782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001786:	4299      	cmp	r1, r3
 8001788:	d002      	beq.n	8001790 <__sflush_r+0x8c>
 800178a:	4628      	mov	r0, r5
 800178c:	f7ff fbf2 	bl	8000f74 <_free_r>
 8001790:	2300      	movs	r3, #0
 8001792:	6363      	str	r3, [r4, #52]	@ 0x34
 8001794:	e00d      	b.n	80017b2 <__sflush_r+0xae>
 8001796:	2301      	movs	r3, #1
 8001798:	4628      	mov	r0, r5
 800179a:	47b0      	blx	r6
 800179c:	4602      	mov	r2, r0
 800179e:	1c50      	adds	r0, r2, #1
 80017a0:	d1c9      	bne.n	8001736 <__sflush_r+0x32>
 80017a2:	682b      	ldr	r3, [r5, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0c6      	beq.n	8001736 <__sflush_r+0x32>
 80017a8:	2b1d      	cmp	r3, #29
 80017aa:	d001      	beq.n	80017b0 <__sflush_r+0xac>
 80017ac:	2b16      	cmp	r3, #22
 80017ae:	d11e      	bne.n	80017ee <__sflush_r+0xea>
 80017b0:	602f      	str	r7, [r5, #0]
 80017b2:	2000      	movs	r0, #0
 80017b4:	e022      	b.n	80017fc <__sflush_r+0xf8>
 80017b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	e01b      	b.n	80017f6 <__sflush_r+0xf2>
 80017be:	690f      	ldr	r7, [r1, #16]
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d0f6      	beq.n	80017b2 <__sflush_r+0xae>
 80017c4:	0793      	lsls	r3, r2, #30
 80017c6:	680e      	ldr	r6, [r1, #0]
 80017c8:	bf08      	it	eq
 80017ca:	694b      	ldreq	r3, [r1, #20]
 80017cc:	600f      	str	r7, [r1, #0]
 80017ce:	bf18      	it	ne
 80017d0:	2300      	movne	r3, #0
 80017d2:	eba6 0807 	sub.w	r8, r6, r7
 80017d6:	608b      	str	r3, [r1, #8]
 80017d8:	f1b8 0f00 	cmp.w	r8, #0
 80017dc:	dde9      	ble.n	80017b2 <__sflush_r+0xae>
 80017de:	6a21      	ldr	r1, [r4, #32]
 80017e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80017e2:	4643      	mov	r3, r8
 80017e4:	463a      	mov	r2, r7
 80017e6:	4628      	mov	r0, r5
 80017e8:	47b0      	blx	r6
 80017ea:	2800      	cmp	r0, #0
 80017ec:	dc08      	bgt.n	8001800 <__sflush_r+0xfc>
 80017ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f6:	81a3      	strh	r3, [r4, #12]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001800:	4407      	add	r7, r0
 8001802:	eba8 0800 	sub.w	r8, r8, r0
 8001806:	e7e7      	b.n	80017d8 <__sflush_r+0xd4>
 8001808:	dfbffffe 	.word	0xdfbffffe

0800180c <_fflush_r>:
 800180c:	b538      	push	{r3, r4, r5, lr}
 800180e:	690b      	ldr	r3, [r1, #16]
 8001810:	4605      	mov	r5, r0
 8001812:	460c      	mov	r4, r1
 8001814:	b913      	cbnz	r3, 800181c <_fflush_r+0x10>
 8001816:	2500      	movs	r5, #0
 8001818:	4628      	mov	r0, r5
 800181a:	bd38      	pop	{r3, r4, r5, pc}
 800181c:	b118      	cbz	r0, 8001826 <_fflush_r+0x1a>
 800181e:	6a03      	ldr	r3, [r0, #32]
 8001820:	b90b      	cbnz	r3, 8001826 <_fflush_r+0x1a>
 8001822:	f7ff f9a5 	bl	8000b70 <__sinit>
 8001826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f3      	beq.n	8001816 <_fflush_r+0xa>
 800182e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001830:	07d0      	lsls	r0, r2, #31
 8001832:	d404      	bmi.n	800183e <_fflush_r+0x32>
 8001834:	0599      	lsls	r1, r3, #22
 8001836:	d402      	bmi.n	800183e <_fflush_r+0x32>
 8001838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800183a:	f7ff fb98 	bl	8000f6e <__retarget_lock_acquire_recursive>
 800183e:	4628      	mov	r0, r5
 8001840:	4621      	mov	r1, r4
 8001842:	f7ff ff5f 	bl	8001704 <__sflush_r>
 8001846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001848:	07da      	lsls	r2, r3, #31
 800184a:	4605      	mov	r5, r0
 800184c:	d4e4      	bmi.n	8001818 <_fflush_r+0xc>
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	059b      	lsls	r3, r3, #22
 8001852:	d4e1      	bmi.n	8001818 <_fflush_r+0xc>
 8001854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001856:	f7ff fb8b 	bl	8000f70 <__retarget_lock_release_recursive>
 800185a:	e7dd      	b.n	8001818 <_fflush_r+0xc>

0800185c <__swhatbuf_r>:
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	460c      	mov	r4, r1
 8001860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001864:	2900      	cmp	r1, #0
 8001866:	b096      	sub	sp, #88	@ 0x58
 8001868:	4615      	mov	r5, r2
 800186a:	461e      	mov	r6, r3
 800186c:	da0d      	bge.n	800188a <__swhatbuf_r+0x2e>
 800186e:	89a3      	ldrh	r3, [r4, #12]
 8001870:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	bf14      	ite	ne
 800187a:	2340      	movne	r3, #64	@ 0x40
 800187c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001880:	2000      	movs	r0, #0
 8001882:	6031      	str	r1, [r6, #0]
 8001884:	602b      	str	r3, [r5, #0]
 8001886:	b016      	add	sp, #88	@ 0x58
 8001888:	bd70      	pop	{r4, r5, r6, pc}
 800188a:	466a      	mov	r2, sp
 800188c:	f000 f87c 	bl	8001988 <_fstat_r>
 8001890:	2800      	cmp	r0, #0
 8001892:	dbec      	blt.n	800186e <__swhatbuf_r+0x12>
 8001894:	9901      	ldr	r1, [sp, #4]
 8001896:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800189a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800189e:	4259      	negs	r1, r3
 80018a0:	4159      	adcs	r1, r3
 80018a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a6:	e7eb      	b.n	8001880 <__swhatbuf_r+0x24>

080018a8 <__smakebuf_r>:
 80018a8:	898b      	ldrh	r3, [r1, #12]
 80018aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018ac:	079d      	lsls	r5, r3, #30
 80018ae:	4606      	mov	r6, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	d507      	bpl.n	80018c4 <__smakebuf_r+0x1c>
 80018b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80018b8:	6023      	str	r3, [r4, #0]
 80018ba:	6123      	str	r3, [r4, #16]
 80018bc:	2301      	movs	r3, #1
 80018be:	6163      	str	r3, [r4, #20]
 80018c0:	b003      	add	sp, #12
 80018c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c4:	ab01      	add	r3, sp, #4
 80018c6:	466a      	mov	r2, sp
 80018c8:	f7ff ffc8 	bl	800185c <__swhatbuf_r>
 80018cc:	9f00      	ldr	r7, [sp, #0]
 80018ce:	4605      	mov	r5, r0
 80018d0:	4639      	mov	r1, r7
 80018d2:	4630      	mov	r0, r6
 80018d4:	f7ff fbba 	bl	800104c <_malloc_r>
 80018d8:	b948      	cbnz	r0, 80018ee <__smakebuf_r+0x46>
 80018da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018de:	059a      	lsls	r2, r3, #22
 80018e0:	d4ee      	bmi.n	80018c0 <__smakebuf_r+0x18>
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	81a3      	strh	r3, [r4, #12]
 80018ec:	e7e2      	b.n	80018b4 <__smakebuf_r+0xc>
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	6020      	str	r0, [r4, #0]
 80018f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f6:	81a3      	strh	r3, [r4, #12]
 80018f8:	9b01      	ldr	r3, [sp, #4]
 80018fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80018fe:	b15b      	cbz	r3, 8001918 <__smakebuf_r+0x70>
 8001900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001904:	4630      	mov	r0, r6
 8001906:	f000 f851 	bl	80019ac <_isatty_r>
 800190a:	b128      	cbz	r0, 8001918 <__smakebuf_r+0x70>
 800190c:	89a3      	ldrh	r3, [r4, #12]
 800190e:	f023 0303 	bic.w	r3, r3, #3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	81a3      	strh	r3, [r4, #12]
 8001918:	89a3      	ldrh	r3, [r4, #12]
 800191a:	431d      	orrs	r5, r3
 800191c:	81a5      	strh	r5, [r4, #12]
 800191e:	e7cf      	b.n	80018c0 <__smakebuf_r+0x18>

08001920 <_putc_r>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	460d      	mov	r5, r1
 8001924:	4614      	mov	r4, r2
 8001926:	4606      	mov	r6, r0
 8001928:	b118      	cbz	r0, 8001932 <_putc_r+0x12>
 800192a:	6a03      	ldr	r3, [r0, #32]
 800192c:	b90b      	cbnz	r3, 8001932 <_putc_r+0x12>
 800192e:	f7ff f91f 	bl	8000b70 <__sinit>
 8001932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001934:	07d8      	lsls	r0, r3, #31
 8001936:	d405      	bmi.n	8001944 <_putc_r+0x24>
 8001938:	89a3      	ldrh	r3, [r4, #12]
 800193a:	0599      	lsls	r1, r3, #22
 800193c:	d402      	bmi.n	8001944 <_putc_r+0x24>
 800193e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001940:	f7ff fb15 	bl	8000f6e <__retarget_lock_acquire_recursive>
 8001944:	68a3      	ldr	r3, [r4, #8]
 8001946:	3b01      	subs	r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	60a3      	str	r3, [r4, #8]
 800194c:	da05      	bge.n	800195a <_putc_r+0x3a>
 800194e:	69a2      	ldr	r2, [r4, #24]
 8001950:	4293      	cmp	r3, r2
 8001952:	db12      	blt.n	800197a <_putc_r+0x5a>
 8001954:	b2eb      	uxtb	r3, r5
 8001956:	2b0a      	cmp	r3, #10
 8001958:	d00f      	beq.n	800197a <_putc_r+0x5a>
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	6022      	str	r2, [r4, #0]
 8001960:	701d      	strb	r5, [r3, #0]
 8001962:	b2ed      	uxtb	r5, r5
 8001964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001966:	07da      	lsls	r2, r3, #31
 8001968:	d405      	bmi.n	8001976 <_putc_r+0x56>
 800196a:	89a3      	ldrh	r3, [r4, #12]
 800196c:	059b      	lsls	r3, r3, #22
 800196e:	d402      	bmi.n	8001976 <_putc_r+0x56>
 8001970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001972:	f7ff fafd 	bl	8000f70 <__retarget_lock_release_recursive>
 8001976:	4628      	mov	r0, r5
 8001978:	bd70      	pop	{r4, r5, r6, pc}
 800197a:	4629      	mov	r1, r5
 800197c:	4622      	mov	r2, r4
 800197e:	4630      	mov	r0, r6
 8001980:	f7ff f9e7 	bl	8000d52 <__swbuf_r>
 8001984:	4605      	mov	r5, r0
 8001986:	e7ed      	b.n	8001964 <_putc_r+0x44>

08001988 <_fstat_r>:
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4d07      	ldr	r5, [pc, #28]	@ (80019a8 <_fstat_r+0x20>)
 800198c:	2300      	movs	r3, #0
 800198e:	4604      	mov	r4, r0
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	f7fe ffd6 	bl	8000946 <_fstat>
 800199a:	1c43      	adds	r3, r0, #1
 800199c:	d102      	bne.n	80019a4 <_fstat_r+0x1c>
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	b103      	cbz	r3, 80019a4 <_fstat_r+0x1c>
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
 80019a6:	bf00      	nop
 80019a8:	200001b8 	.word	0x200001b8

080019ac <_isatty_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4d06      	ldr	r5, [pc, #24]	@ (80019c8 <_isatty_r+0x1c>)
 80019b0:	2300      	movs	r3, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	602b      	str	r3, [r5, #0]
 80019b8:	f7fe ffd5 	bl	8000966 <_isatty>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_isatty_r+0x1a>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_isatty_r+0x1a>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	200001b8 	.word	0x200001b8

080019cc <_sbrk_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4d06      	ldr	r5, [pc, #24]	@ (80019e8 <_sbrk_r+0x1c>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	602b      	str	r3, [r5, #0]
 80019d8:	f7fe ffde 	bl	8000998 <_sbrk>
 80019dc:	1c43      	adds	r3, r0, #1
 80019de:	d102      	bne.n	80019e6 <_sbrk_r+0x1a>
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	b103      	cbz	r3, 80019e6 <_sbrk_r+0x1a>
 80019e4:	6023      	str	r3, [r4, #0]
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	200001b8 	.word	0x200001b8

080019ec <_init>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr

080019f8 <_fini>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr
